
AVRASM ver. 2.1.30  C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm Thu Dec 21 21:25:41 2023

C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1419): warning: Register r4 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1420): warning: Register r5 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1421): warning: Register r6 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1422): warning: Register r7 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1423): warning: Register r8 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1424): warning: Register r9 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1425): warning: Register r10 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1426): warning: Register r11 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1427): warning: Register r13 already defined by the .DEF directive
C:\Users\user\Desktop\2학년 MDP\BoxUncleGroup1116\Proteus,CodeVisionAVR\Random_Clock\Debug\List\RandomClock.asm(1428): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.51 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x68
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x80
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _num=R4
                 	.DEF _num_msb=R5
                 	.DEF _tri=R6
                 	.DEF _tri_msb=R7
                 	.DEF _mode=R8
                 	.DEF _mode_msb=R9
                 	.DEF _brk=R10
                 	.DEF _brk_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0228 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0000
000050 0000      	.DB  0x0,0x0,0x0,0x0
000051 0010
000052 0000      	.DB  0x10,0x0,0x0,0x0
                 
                 _0x3:
000053 2010
000054 4080      	.DB  0x10,0x20,0x80,0x40
                 _0x4:
000055 fbfe
000056 bfef      	.DB  0xFE,0xFB,0xEF,0xBF
                 _0x5:
000057 f7fd
000058 7fdf      	.DB  0xFD,0xF7,0xDF,0x7F
                 _0x0:
000059 6553
00005a 656c
00005b 7463
00005c 6d20      	.DB  0x53,0x65,0x6C,0x65,0x63,0x74,0x20,0x6D
00005d 646f
00005e 0065
00005f 7543
000060 7272      	.DB  0x6F,0x64,0x65,0x0,0x43,0x75,0x72,0x72
000061 6365
000062 2074
000063 6f6d
000064 6564      	.DB  0x65,0x63,0x74,0x20,0x6D,0x6F,0x64,0x65
000065 203a
000066 3631
000067 4300
000068 7275      	.DB  0x3A,0x20,0x31,0x36,0x0,0x43,0x75,0x72
000069 6572
00006a 7463
00006b 6d20
00006c 646f      	.DB  0x72,0x65,0x63,0x74,0x20,0x6D,0x6F,0x64
00006d 3a65
00006e 3820
00006f 5300
000070 4154      	.DB  0x65,0x3A,0x20,0x38,0x0,0x53,0x54,0x41
000071 5452
000072 4720
000073 4d41
000074 0045      	.DB  0x52,0x54,0x20,0x47,0x41,0x4D,0x45,0x0
000075 2030
000076 5753
000077 6920
000078 2073      	.DB  0x30,0x20,0x53,0x57,0x20,0x69,0x73,0x20
000079 6f6e
00007a 2074
00007b 6f62
00007c 626d      	.DB  0x6E,0x6F,0x74,0x20,0x62,0x6F,0x6D,0x62
00007d 4200
00007e 4d4f
00007f 0042
000080 2031      	.DB  0x0,0x42,0x4F,0x4D,0x42,0x0,0x31,0x20
000081 5753
000082 6920
000083 2073
000084 6f6e      	.DB  0x53,0x57,0x20,0x69,0x73,0x20,0x6E,0x6F
000085 2074
000086 6f62
000087 626d
000088 3100      	.DB  0x74,0x20,0x62,0x6F,0x6D,0x62,0x0,0x31
000089 5320
00008a 2057
00008b 7369
00008c 6220      	.DB  0x20,0x53,0x57,0x20,0x69,0x73,0x20,0x62
00008d 6d6f
00008e 0062
00008f 2032
000090 5753      	.DB  0x6F,0x6D,0x62,0x0,0x32,0x20,0x53,0x57
000091 6920
000092 2073
000093 6f6e
000094 2074      	.DB  0x20,0x69,0x73,0x20,0x6E,0x6F,0x74,0x20
000095 6f62
000096 626d
000097 3200
000098 5320      	.DB  0x62,0x6F,0x6D,0x62,0x0,0x32,0x20,0x53
000099 2057
00009a 7369
00009b 6220
00009c 6d6f      	.DB  0x57,0x20,0x69,0x73,0x20,0x62,0x6F,0x6D
00009d 0062
00009e 2033
00009f 5753
0000a0 6920      	.DB  0x62,0x0,0x33,0x20,0x53,0x57,0x20,0x69
0000a1 2073
0000a2 6f6e
0000a3 2074
0000a4 6f62      	.DB  0x73,0x20,0x6E,0x6F,0x74,0x20,0x62,0x6F
0000a5 626d
0000a6 3300
0000a7 5320
0000a8 2057      	.DB  0x6D,0x62,0x0,0x33,0x20,0x53,0x57,0x20
0000a9 7369
0000aa 6220
0000ab 6d6f
0000ac 0062      	.DB  0x69,0x73,0x20,0x62,0x6F,0x6D,0x62,0x0
0000ad 2034
0000ae 5753
0000af 6920
0000b0 2073      	.DB  0x34,0x20,0x53,0x57,0x20,0x69,0x73,0x20
0000b1 6f6e
0000b2 2074
0000b3 6f62
0000b4 626d      	.DB  0x6E,0x6F,0x74,0x20,0x62,0x6F,0x6D,0x62
0000b5 3400
0000b6 5320
0000b7 2057
0000b8 7369      	.DB  0x0,0x34,0x20,0x53,0x57,0x20,0x69,0x73
0000b9 6220
0000ba 6d6f
0000bb 0062
0000bc 2035      	.DB  0x20,0x62,0x6F,0x6D,0x62,0x0,0x35,0x20
0000bd 5753
0000be 6920
0000bf 2073
0000c0 6f6e      	.DB  0x53,0x57,0x20,0x69,0x73,0x20,0x6E,0x6F
0000c1 2074
0000c2 6f62
0000c3 626d
0000c4 3500      	.DB  0x74,0x20,0x62,0x6F,0x6D,0x62,0x0,0x35
0000c5 5320
0000c6 2057
0000c7 7369
0000c8 6220      	.DB  0x20,0x53,0x57,0x20,0x69,0x73,0x20,0x62
0000c9 6d6f
0000ca 0062
0000cb 2036
0000cc 5753      	.DB  0x6F,0x6D,0x62,0x0,0x36,0x20,0x53,0x57
0000cd 6920
0000ce 2073
0000cf 6f6e
0000d0 2074      	.DB  0x20,0x69,0x73,0x20,0x6E,0x6F,0x74,0x20
0000d1 6f62
0000d2 626d
0000d3 3600
0000d4 5320      	.DB  0x62,0x6F,0x6D,0x62,0x0,0x36,0x20,0x53
0000d5 2057
0000d6 7369
0000d7 6220
0000d8 6d6f      	.DB  0x57,0x20,0x69,0x73,0x20,0x62,0x6F,0x6D
0000d9 0062
0000da 2037
0000db 5753
0000dc 6920      	.DB  0x62,0x0,0x37,0x20,0x53,0x57,0x20,0x69
0000dd 2073
0000de 6f6e
0000df 2074
0000e0 6f62      	.DB  0x73,0x20,0x6E,0x6F,0x74,0x20,0x62,0x6F
0000e1 626d
0000e2 3700
0000e3 5320
0000e4 2057      	.DB  0x6D,0x62,0x0,0x37,0x20,0x53,0x57,0x20
0000e5 7369
0000e6 6220
0000e7 6d6f
0000e8 0062      	.DB  0x69,0x73,0x20,0x62,0x6F,0x6D,0x62,0x0
0000e9 2038
0000ea 5753
0000eb 6920
0000ec 2073      	.DB  0x38,0x20,0x53,0x57,0x20,0x69,0x73,0x20
0000ed 6f6e
0000ee 2074
0000ef 6f62
0000f0 626d      	.DB  0x6E,0x6F,0x74,0x20,0x62,0x6F,0x6D,0x62
0000f1 3800
0000f2 5320
0000f3 2057
0000f4 7369      	.DB  0x0,0x38,0x20,0x53,0x57,0x20,0x69,0x73
0000f5 6220
0000f6 6d6f
0000f7 0062
0000f8 2039      	.DB  0x20,0x62,0x6F,0x6D,0x62,0x0,0x39,0x20
0000f9 5753
0000fa 6920
0000fb 2073
0000fc 6f6e      	.DB  0x53,0x57,0x20,0x69,0x73,0x20,0x6E,0x6F
0000fd 2074
0000fe 6f62
0000ff 626d
000100 3900      	.DB  0x74,0x20,0x62,0x6F,0x6D,0x62,0x0,0x39
000101 5320
000102 2057
000103 7369
000104 6220      	.DB  0x20,0x53,0x57,0x20,0x69,0x73,0x20,0x62
000105 6d6f
000106 0062
000107 2041
000108 5753      	.DB  0x6F,0x6D,0x62,0x0,0x41,0x20,0x53,0x57
000109 6920
00010a 2073
00010b 6f6e
00010c 2074      	.DB  0x20,0x69,0x73,0x20,0x6E,0x6F,0x74,0x20
00010d 6f62
00010e 626d
00010f 4100
000110 5320      	.DB  0x62,0x6F,0x6D,0x62,0x0,0x41,0x20,0x53
000111 2057
000112 7369
000113 6220
000114 6d6f      	.DB  0x57,0x20,0x69,0x73,0x20,0x62,0x6F,0x6D
000115 0062
000116 2042
000117 5753
000118 6920      	.DB  0x62,0x0,0x42,0x20,0x53,0x57,0x20,0x69
000119 2073
00011a 6f6e
00011b 2074
00011c 6f62      	.DB  0x73,0x20,0x6E,0x6F,0x74,0x20,0x62,0x6F
00011d 626d
00011e 4200
00011f 5320
000120 2057      	.DB  0x6D,0x62,0x0,0x42,0x20,0x53,0x57,0x20
000121 7369
000122 6220
000123 6d6f
000124 0062      	.DB  0x69,0x73,0x20,0x62,0x6F,0x6D,0x62,0x0
000125 2043
000126 5753
000127 6920
000128 2073      	.DB  0x43,0x20,0x53,0x57,0x20,0x69,0x73,0x20
000129 6f6e
00012a 2074
00012b 6f62
00012c 626d      	.DB  0x6E,0x6F,0x74,0x20,0x62,0x6F,0x6D,0x62
00012d 4300
00012e 5320
00012f 2057
000130 7369      	.DB  0x0,0x43,0x20,0x53,0x57,0x20,0x69,0x73
000131 6220
000132 6d6f
000133 0062
000134 2044      	.DB  0x20,0x62,0x6F,0x6D,0x62,0x0,0x44,0x20
000135 5753
000136 6920
000137 2073
000138 6f6e      	.DB  0x53,0x57,0x20,0x69,0x73,0x20,0x6E,0x6F
000139 2074
00013a 6f62
00013b 626d
00013c 4400      	.DB  0x74,0x20,0x62,0x6F,0x6D,0x62,0x0,0x44
00013d 5320
00013e 2057
00013f 7369
000140 6220      	.DB  0x20,0x53,0x57,0x20,0x69,0x73,0x20,0x62
000141 6d6f
000142 0062
000143 2045
000144 5753      	.DB  0x6F,0x6D,0x62,0x0,0x45,0x20,0x53,0x57
000145 6920
000146 2073
000147 6f6e
000148 2074      	.DB  0x20,0x69,0x73,0x20,0x6E,0x6F,0x74,0x20
000149 6f62
00014a 626d
00014b 4500
00014c 5320      	.DB  0x62,0x6F,0x6D,0x62,0x0,0x45,0x20,0x53
00014d 2057
00014e 7369
00014f 6220
000150 6d6f      	.DB  0x57,0x20,0x69,0x73,0x20,0x62,0x6F,0x6D
000151 0062
000152 2046
000153 5753
000154 6920      	.DB  0x62,0x0,0x46,0x20,0x53,0x57,0x20,0x69
000155 2073
000156 6f6e
000157 2074
000158 6f62      	.DB  0x73,0x20,0x6E,0x6F,0x74,0x20,0x62,0x6F
000159 626d
00015a 4600
00015b 5320
00015c 2057      	.DB  0x6D,0x62,0x0,0x46,0x20,0x53,0x57,0x20
00015d 7369
00015e 6220
00015f 6d6f
000160 0062      	.DB  0x69,0x73,0x20,0x62,0x6F,0x6D,0x62,0x0
000161 524d
000162 5420
000163 4e4f
000164 0047      	.DB  0x4D,0x52,0x20,0x54,0x4F,0x4E,0x47,0x0
000165 5550
000166 4853
000167 4320
000168 4e4f      	.DB  0x50,0x55,0x53,0x48,0x20,0x43,0x4F,0x4E
000169 4954
00016a 554e
00016b 0045
00016c 4553      	.DB  0x54,0x49,0x4E,0x55,0x45,0x0,0x53,0x45
00016d 454c
00016e 5443
00016f 2020
000170 4f4d      	.DB  0x4C,0x45,0x43,0x54,0x20,0x20,0x4D,0x4F
000171 4544
000172 2000
000173 2020
000174 3120      	.DB  0x44,0x45,0x0,0x20,0x20,0x20,0x20,0x31
000175 2036
000176 207c
000177 3820
000178 4700      	.DB  0x36,0x20,0x7C,0x20,0x20,0x38,0x0,0x47
000179 4d41
00017a 2045
00017b 4552
00017c 4441      	.DB  0x41,0x4D,0x45,0x20,0x52,0x45,0x41,0x44
00017d 0059      	.DB  0x59,0x0
                 _0x2000003:
00017e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00017f 0008      	.DW  0x08
000180 0004      	.DW  0x04
000181 009e      	.DW  __REG_VARS*2
                 
000182 0004      	.DW  0x04
000183 0751      	.DW  _vertical
000184 00a6      	.DW  _0x3*2
                 
000185 0004      	.DW  0x04
000186 0755      	.DW  _red_led
000187 00aa      	.DW  _0x4*2
                 
000188 0004      	.DW  0x04
000189 0759      	.DW  _green_led
00018a 00ae      	.DW  _0x5*2
                 
00018b 000b      	.DW  0x0B
00018c 0500      	.DW  _0x1B
00018d 00df      	.DW  _0x0*2+45
                 
00018e 0011      	.DW  0x11
00018f 050b      	.DW  _0x1B+11
000190 00ea      	.DW  _0x0*2+56
                 
000191 0005      	.DW  0x05
000192 051c      	.DW  _0x1B+28
000193 00fb      	.DW  _0x0*2+73
                 
000194 0011      	.DW  0x11
000195 0521      	.DW  _0x1B+33
000196 0100      	.DW  _0x0*2+78
                 
000197 000d      	.DW  0x0D
000198 0532      	.DW  _0x1B+50
000199 0111      	.DW  _0x0*2+95
                 
00019a 0005      	.DW  0x05
00019b 053f      	.DW  _0x1B+63
00019c 00fb      	.DW  _0x0*2+73
                 
00019d 0011      	.DW  0x11
00019e 0544      	.DW  _0x1B+68
00019f 011e      	.DW  _0x0*2+108
                 
0001a0 000d      	.DW  0x0D
0001a1 0555      	.DW  _0x1B+85
0001a2 012f      	.DW  _0x0*2+125
                 
0001a3 0005      	.DW  0x05
0001a4 0562      	.DW  _0x1B+98
0001a5 00fb      	.DW  _0x0*2+73
                 
0001a6 0011      	.DW  0x11
0001a7 0567      	.DW  _0x1B+103
0001a8 013c      	.DW  _0x0*2+138
                 
0001a9 000d      	.DW  0x0D
0001aa 0578      	.DW  _0x1B+120
0001ab 014d      	.DW  _0x0*2+155
                 
0001ac 0005      	.DW  0x05
0001ad 0585      	.DW  _0x1B+133
0001ae 00fb      	.DW  _0x0*2+73
                 
0001af 0011      	.DW  0x11
0001b0 058a      	.DW  _0x1B+138
0001b1 015a      	.DW  _0x0*2+168
                 
0001b2 000d      	.DW  0x0D
0001b3 059b      	.DW  _0x1B+155
0001b4 016b      	.DW  _0x0*2+185
                 
0001b5 0005      	.DW  0x05
0001b6 05a8      	.DW  _0x1B+168
0001b7 00fb      	.DW  _0x0*2+73
                 
0001b8 0011      	.DW  0x11
0001b9 05ad      	.DW  _0x1B+173
0001ba 0178      	.DW  _0x0*2+198
                 
0001bb 000d      	.DW  0x0D
0001bc 05be      	.DW  _0x1B+190
0001bd 0189      	.DW  _0x0*2+215
                 
0001be 0005      	.DW  0x05
0001bf 05cb      	.DW  _0x1B+203
0001c0 00fb      	.DW  _0x0*2+73
                 
0001c1 0011      	.DW  0x11
0001c2 05d0      	.DW  _0x1B+208
0001c3 0196      	.DW  _0x0*2+228
                 
0001c4 000d      	.DW  0x0D
0001c5 05e1      	.DW  _0x1B+225
0001c6 01a7      	.DW  _0x0*2+245
                 
0001c7 0005      	.DW  0x05
0001c8 05ee      	.DW  _0x1B+238
0001c9 00fb      	.DW  _0x0*2+73
                 
0001ca 0011      	.DW  0x11
0001cb 05f3      	.DW  _0x1B+243
0001cc 01b4      	.DW  _0x0*2+258
                 
0001cd 000d      	.DW  0x0D
0001ce 0604      	.DW  _0x1B+260
0001cf 01c5      	.DW  _0x0*2+275
                 
0001d0 0005      	.DW  0x05
0001d1 0611      	.DW  _0x1B+273
0001d2 00fb      	.DW  _0x0*2+73
                 
0001d3 0011      	.DW  0x11
0001d4 0616      	.DW  _0x1B+278
0001d5 01d2      	.DW  _0x0*2+288
                 
0001d6 000d      	.DW  0x0D
0001d7 0627      	.DW  _0x1B+295
0001d8 01e3      	.DW  _0x0*2+305
                 
0001d9 0005      	.DW  0x05
0001da 0634      	.DW  _0x1B+308
0001db 00fb      	.DW  _0x0*2+73
                 
0001dc 0011      	.DW  0x11
0001dd 0639      	.DW  _0x1B+313
0001de 01f0      	.DW  _0x0*2+318
                 
0001df 000d      	.DW  0x0D
0001e0 064a      	.DW  _0x1B+330
0001e1 0201      	.DW  _0x0*2+335
                 
0001e2 0005      	.DW  0x05
0001e3 0657      	.DW  _0x1B+343
0001e4 00fb      	.DW  _0x0*2+73
                 
0001e5 0011      	.DW  0x11
0001e6 065c      	.DW  _0x1B+348
0001e7 020e      	.DW  _0x0*2+348
                 
0001e8 000d      	.DW  0x0D
0001e9 066d      	.DW  _0x1B+365
0001ea 021f      	.DW  _0x0*2+365
                 
0001eb 0005      	.DW  0x05
0001ec 067a      	.DW  _0x1B+378
0001ed 00fb      	.DW  _0x0*2+73
                 
0001ee 0011      	.DW  0x11
0001ef 067f      	.DW  _0x1B+383
0001f0 022c      	.DW  _0x0*2+378
                 
0001f1 000d      	.DW  0x0D
0001f2 0690      	.DW  _0x1B+400
0001f3 023d      	.DW  _0x0*2+395
                 
0001f4 0005      	.DW  0x05
0001f5 069d      	.DW  _0x1B+413
0001f6 00fb      	.DW  _0x0*2+73
                 
0001f7 0011      	.DW  0x11
0001f8 06a2      	.DW  _0x1B+418
0001f9 024a      	.DW  _0x0*2+408
                 
0001fa 000d      	.DW  0x0D
0001fb 06b3      	.DW  _0x1B+435
0001fc 025b      	.DW  _0x0*2+425
                 
0001fd 0005      	.DW  0x05
0001fe 06c0      	.DW  _0x1B+448
0001ff 00fb      	.DW  _0x0*2+73
                 
000200 0011      	.DW  0x11
000201 06c5      	.DW  _0x1B+453
000202 0268      	.DW  _0x0*2+438
                 
000203 000d      	.DW  0x0D
000204 06d6      	.DW  _0x1B+470
000205 0279      	.DW  _0x0*2+455
                 
000206 0005      	.DW  0x05
000207 06e3      	.DW  _0x1B+483
000208 00fb      	.DW  _0x0*2+73
                 
000209 0011      	.DW  0x11
00020a 06e8      	.DW  _0x1B+488
00020b 0286      	.DW  _0x0*2+468
                 
00020c 000d      	.DW  0x0D
00020d 06f9      	.DW  _0x1B+505
00020e 0297      	.DW  _0x0*2+485
                 
00020f 0005      	.DW  0x05
000210 0706      	.DW  _0x1B+518
000211 00fb      	.DW  _0x0*2+73
                 
000212 0011      	.DW  0x11
000213 070b      	.DW  _0x1B+523
000214 02a4      	.DW  _0x0*2+498
                 
000215 000d      	.DW  0x0D
000216 071c      	.DW  _0x1B+540
000217 02b5      	.DW  _0x0*2+515
                 
000218 0005      	.DW  0x05
000219 0729      	.DW  _0x1B+553
00021a 00fb      	.DW  _0x0*2+73
                 
00021b 0008      	.DW  0x08
00021c 072e      	.DW  _0x5A
00021d 02c2      	.DW  _0x0*2+528
                 
00021e 000e      	.DW  0x0E
00021f 0736      	.DW  _0x5A+8
000220 02ca      	.DW  _0x0*2+536
                 
000221 000d      	.DW  0x0D
000222 0744      	.DW  _0x5A+22
000223 02d8      	.DW  _0x0*2+550
                 
000224 0002      	.DW  0x02
000225 075d      	.DW  __base_y_G100
000226 02fc      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000227 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000228 94f8      	CLI
000229 27ee      	CLR  R30
00022a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00022b e0f1      	LDI  R31,1
00022c bff5      	OUT  MCUCR,R31
00022d bfe5      	OUT  MCUCR,R30
00022e 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000230 e08d      	LDI  R24,(14-2)+1
000231 e0a2      	LDI  R26,2
000232 27bb      	CLR  R27
                 __CLEAR_REG:
000233 93ed      	ST   X+,R30
000234 958a      	DEC  R24
000235 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000236 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000237 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000238 e0a0      	LDI  R26,LOW(__SRAM_START)
000239 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00023a 93ed      	ST   X+,R30
00023b 9701      	SBIW R24,1
00023c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00023d efee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00023e e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00023f 9185      	LPM  R24,Z+
000240 9195      	LPM  R25,Z+
000241 9700      	SBIW R24,0
000242 f061      	BREQ __GLOBAL_INI_END
000243 91a5      	LPM  R26,Z+
000244 91b5      	LPM  R27,Z+
000245 9005      	LPM  R0,Z+
000246 9015      	LPM  R1,Z+
000247 01bf      	MOVW R22,R30
000248 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000249 9005      	LPM  R0,Z+
00024a 920d      	ST   X+,R0
00024b 9701      	SBIW R24,1
00024c f7e1      	BRNE __GLOBAL_INI_LOOP
00024d 01fb      	MOVW R30,R22
00024e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00024f bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000250 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000251 bfed      	OUT  SPL,R30
000252 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000253 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000254 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000255 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000256 940c 05ec 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                         .equ __lcd_port = 0x1b //a포트로 사용
                 ; 0000 0005     #endasm
                 ;int keyMatrix(unsigned char in);
                 
                 	.DSEG
                 ;void reset(void);
                 ;void manager(void);
                 ;void modee()
                 ; 0000 0016 {
                 
                 	.CSEG
                 _modee:
                 ; .FSTART _modee
                 ; 0000 0017 if(PINF == 0xfe) //16모드 입력
000258 b1e0      	IN   R30,0x0
000259 3fee      	CPI  R30,LOW(0xFE)
00025a f431      	BRNE _0x6
                 ; 0000 0018 {
                 ; 0000 0019 mode = 16; //모드에 16저장
00025b e1e0      	LDI  R30,LOW(16)
00025c e0f0      	LDI  R31,HIGH(16)
00025d d47e      	RCALL SUBOPT_0x0
                 ; 0000 001A lcd_clear();
                 ; 0000 001B lcd_gotoxy(0,0);
                 ; 0000 001C lcd_putsf("Select mode");
                 ; 0000 001D lcd_gotoxy(0,1);
                 ; 0000 001E lcd_putsf("Currect mode: 16"); //선택한 모드를 lcd에 출력
                +
00025e ebae     +LDI R26 , LOW ( 2 * _0x0 + ( 12 ) )
00025f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW2FN _0x0,12
000260 d488      	RCALL SUBOPT_0x1
                 ; 0000 001F PORTB = 0x00;
                 ; 0000 0020 PORTC = 0xff; // led 기본상태(off)
                 ; 0000 0021 }
                 ; 0000 0022 
                 ; 0000 0023 if(PINF == 0xfd) //8모드 입력
                 _0x6:
000261 b1e0      	IN   R30,0x0
000262 3fed      	CPI  R30,LOW(0xFD)
000263 f431      	BRNE _0x7
                 ; 0000 0024 {
                 ; 0000 0025 mode = 8; //모드에 8저장
000264 e0e8      	LDI  R30,LOW(8)
000265 e0f0      	LDI  R31,HIGH(8)
000266 d475      	RCALL SUBOPT_0x0
                 ; 0000 0026 lcd_clear();
                 ; 0000 0027 lcd_gotoxy(0,0);
                 ; 0000 0028 lcd_putsf("Select mode");
                 ; 0000 0029 lcd_gotoxy(0,1);
                 ; 0000 002A lcd_putsf("Currect mode: 8"); //선택한 모드 lcd에 출력
                +
000267 ecaf     +LDI R26 , LOW ( 2 * _0x0 + ( 29 ) )
000268 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW2FN _0x0,29
000269 d47f      	RCALL SUBOPT_0x1
                 ; 0000 002B PORTB = 0x00;
                 ; 0000 002C PORTC = 0xff; //led 기본상태(off)
                 ; 0000 002D }
                 ; 0000 002E }
                 _0x7:
00026a 9508      	RET
                 ; .FEND
                 ;void buzzer(void)
                 ; 0000 0031 {
                 _buzzer:
                 ; .FSTART _buzzer
                 ; 0000 0032 PORTG = 0xfe;
00026b efee      	LDI  R30,LOW(254)
00026c c003      	RJMP _0x2080003
                 ; 0000 0033 }
                 ; .FEND
                 ;void buzzer2(void)
                 ; 0000 0036 {
                 _buzzer2:
                 ; .FSTART _buzzer2
                 ; 0000 0037 PORTG = 0xfd;
00026d efed      	LDI  R30,LOW(253)
00026e c001      	RJMP _0x2080003
                 ; 0000 0038 }
                 ; .FEND
                 ;void buzzer_off(void)
                 ; 0000 003B {
                 _buzzer_off:
                 ; .FSTART _buzzer_off
                 ; 0000 003C PORTG = 0xff;
00026f efef      	LDI  R30,LOW(255)
                 _0x2080003:
000270 93e0 0065 	STS  101,R30
                 ; 0000 003D }
000272 9508      	RET
                 ; .FEND
                 ;int keyMatrix(unsigned char in)
                 ; 0000 0041 {
                 _keyMatrix:
                 ; .FSTART _keyMatrix
                 ; 0000 0042 int key; //반환 값 저장
                 ; 0000 0043 
                 ; 0000 0044 switch (in) {  //입력을 받는것은 PIN
000273 d4dd      	RCALL __SAVELOCR4
000274 2f3a      	MOV  R19,R26
                 ;	in -> R19
                 ;	key -> R16,R17
000275 2fe3      	MOV  R30,R19
000276 e0f0      	LDI  R31,0
                 ; 0000 0045 case 0x7e : key = 0;
000277 37ee      	CPI  R30,LOW(0x7E)
000278 e0a0      	LDI  R26,HIGH(0x7E)
000279 07fa      	CPC  R31,R26
00027a f419      	BRNE _0xB
                +
00027b e000     +LDI R16 , LOW ( 0 )
00027c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0046 break;
00027d c068      	RJMP _0xA
                 ; 0000 0047 case 0x7d : key = 1; // 0111 1110이면, 1을 return
                 _0xB:
00027e 37ed      	CPI  R30,LOW(0x7D)
00027f e0a0      	LDI  R26,HIGH(0x7D)
000280 07fa      	CPC  R31,R26
000281 f419      	BRNE _0xC
                +
000282 e001     +LDI R16 , LOW ( 1 )
000283 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0048 break;
000284 c061      	RJMP _0xA
                 ; 0000 0049 case 0x7b : key = 2; // 0111 1011이면, 2를 반환
                 _0xC:
000285 37eb      	CPI  R30,LOW(0x7B)
000286 e0a0      	LDI  R26,HIGH(0x7B)
000287 07fa      	CPC  R31,R26
000288 f419      	BRNE _0xD
                +
000289 e002     +LDI R16 , LOW ( 2 )
00028a e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ; 0000 004A break;
00028b c05a      	RJMP _0xA
                 ; 0000 004B case 0x77 : key = 3;
                 _0xD:
00028c 37e7      	CPI  R30,LOW(0x77)
00028d e0a0      	LDI  R26,HIGH(0x77)
00028e 07fa      	CPC  R31,R26
00028f f419      	BRNE _0xE
                +
000290 e003     +LDI R16 , LOW ( 3 )
000291 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 ; 0000 004C break;
000292 c053      	RJMP _0xA
                 ; 0000 004D case 0xbe : key = 4;
                 _0xE:
000293 3bee      	CPI  R30,LOW(0xBE)
000294 e0a0      	LDI  R26,HIGH(0xBE)
000295 07fa      	CPC  R31,R26
000296 f419      	BRNE _0xF
                +
000297 e004     +LDI R16 , LOW ( 4 )
000298 e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 ; 0000 004E break;
000299 c04c      	RJMP _0xA
                 ; 0000 004F case 0xbd : key = 5;
                 _0xF:
00029a 3bed      	CPI  R30,LOW(0xBD)
00029b e0a0      	LDI  R26,HIGH(0xBD)
00029c 07fa      	CPC  R31,R26
00029d f419      	BRNE _0x10
                +
00029e e005     +LDI R16 , LOW ( 5 )
00029f e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 ; 0000 0050 break;
0002a0 c045      	RJMP _0xA
                 ; 0000 0051 case 0xbb : key = 6;
                 _0x10:
0002a1 3beb      	CPI  R30,LOW(0xBB)
0002a2 e0a0      	LDI  R26,HIGH(0xBB)
0002a3 07fa      	CPC  R31,R26
0002a4 f419      	BRNE _0x11
                +
0002a5 e006     +LDI R16 , LOW ( 6 )
0002a6 e010     +LDI R17 , HIGH ( 6 )
                 	__GETWRN 16,17,6
                 ; 0000 0052 break;
0002a7 c03e      	RJMP _0xA
                 ; 0000 0053 case 0xb7 : key = 7;
                 _0x11:
0002a8 3be7      	CPI  R30,LOW(0xB7)
0002a9 e0a0      	LDI  R26,HIGH(0xB7)
0002aa 07fa      	CPC  R31,R26
0002ab f419      	BRNE _0x12
                +
0002ac e007     +LDI R16 , LOW ( 7 )
0002ad e010     +LDI R17 , HIGH ( 7 )
                 	__GETWRN 16,17,7
                 ; 0000 0054 break;
0002ae c037      	RJMP _0xA
                 ; 0000 0055 case 0xde : key = 8;
                 _0x12:
0002af 3dee      	CPI  R30,LOW(0xDE)
0002b0 e0a0      	LDI  R26,HIGH(0xDE)
0002b1 07fa      	CPC  R31,R26
0002b2 f419      	BRNE _0x13
                +
0002b3 e008     +LDI R16 , LOW ( 8 )
0002b4 e010     +LDI R17 , HIGH ( 8 )
                 	__GETWRN 16,17,8
                 ; 0000 0056 break;
0002b5 c030      	RJMP _0xA
                 ; 0000 0057 case 0xdd : key = 9;
                 _0x13:
0002b6 3ded      	CPI  R30,LOW(0xDD)
0002b7 e0a0      	LDI  R26,HIGH(0xDD)
0002b8 07fa      	CPC  R31,R26
0002b9 f419      	BRNE _0x14
                +
0002ba e009     +LDI R16 , LOW ( 9 )
0002bb e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 ; 0000 0058 break;
0002bc c029      	RJMP _0xA
                 ; 0000 0059 case 0xdb : key = 10;
                 _0x14:
0002bd 3deb      	CPI  R30,LOW(0xDB)
0002be e0a0      	LDI  R26,HIGH(0xDB)
0002bf 07fa      	CPC  R31,R26
0002c0 f419      	BRNE _0x15
                +
0002c1 e00a     +LDI R16 , LOW ( 10 )
0002c2 e010     +LDI R17 , HIGH ( 10 )
                 	__GETWRN 16,17,10
                 ; 0000 005A break;
0002c3 c022      	RJMP _0xA
                 ; 0000 005B case 0xd7 : key = 11;
                 _0x15:
0002c4 3de7      	CPI  R30,LOW(0xD7)
0002c5 e0a0      	LDI  R26,HIGH(0xD7)
0002c6 07fa      	CPC  R31,R26
0002c7 f419      	BRNE _0x16
                +
0002c8 e00b     +LDI R16 , LOW ( 11 )
0002c9 e010     +LDI R17 , HIGH ( 11 )
                 	__GETWRN 16,17,11
                 ; 0000 005C break;
0002ca c01b      	RJMP _0xA
                 ; 0000 005D case 0xee : key = 12;
                 _0x16:
0002cb 3eee      	CPI  R30,LOW(0xEE)
0002cc e0a0      	LDI  R26,HIGH(0xEE)
0002cd 07fa      	CPC  R31,R26
0002ce f419      	BRNE _0x17
                +
0002cf e00c     +LDI R16 , LOW ( 12 )
0002d0 e010     +LDI R17 , HIGH ( 12 )
                 	__GETWRN 16,17,12
                 ; 0000 005E break;
0002d1 c014      	RJMP _0xA
                 ; 0000 005F case 0xed : key = 13;
                 _0x17:
0002d2 3eed      	CPI  R30,LOW(0xED)
0002d3 e0a0      	LDI  R26,HIGH(0xED)
0002d4 07fa      	CPC  R31,R26
0002d5 f419      	BRNE _0x18
                +
0002d6 e00d     +LDI R16 , LOW ( 13 )
0002d7 e010     +LDI R17 , HIGH ( 13 )
                 	__GETWRN 16,17,13
                 ; 0000 0060 break;
0002d8 c00d      	RJMP _0xA
                 ; 0000 0061 case 0xeb : key = 14;
                 _0x18:
0002d9 3eeb      	CPI  R30,LOW(0xEB)
0002da e0a0      	LDI  R26,HIGH(0xEB)
0002db 07fa      	CPC  R31,R26
0002dc f419      	BRNE _0x19
                +
0002dd e00e     +LDI R16 , LOW ( 14 )
0002de e010     +LDI R17 , HIGH ( 14 )
                 	__GETWRN 16,17,14
                 ; 0000 0062 break;
0002df c006      	RJMP _0xA
                 ; 0000 0063 case 0xe7 : key = 15;
                 _0x19:
0002e0 3ee7      	CPI  R30,LOW(0xE7)
0002e1 e0a0      	LDI  R26,HIGH(0xE7)
0002e2 07fa      	CPC  R31,R26
0002e3 f411      	BRNE _0xA
                +
0002e4 e00f     +LDI R16 , LOW ( 15 )
0002e5 e010     +LDI R17 , HIGH ( 15 )
                 	__GETWRN 16,17,15
                 ; 0000 0064 break;
                 ; 0000 0065 }
                 _0xA:
                 ; 0000 0066 
                 ; 0000 0067 return key; //key 리턴
0002e6 01f8      	MOVW R30,R16
0002e7 d470      	RCALL __LOADLOCR4
0002e8 9624      	ADIW R28,4
0002e9 9508      	RET
                 ; 0000 0068 
                 ; 0000 0069 }
                 ; .FEND
                 ;void manager(void)
                 ; 0000 006C {
                 _manager:
                 ; .FSTART _manager
                 ; 0000 006D int keyout; // 키매트릭스 신호
                 ; 0000 006E int i; //for문
                 ; 0000 006F unsigned char matrix; //PIND를 저장할 변수
                 ; 0000 0070 
                 ; 0000 0071 lcd_init(16);
0002ea d464      	RCALL __SAVELOCR6
                 ;	keyout -> R16,R17
                 ;	i -> R18,R19
                 ;	matrix -> R21
0002eb e1a0      	LDI  R26,LOW(16)
0002ec d3bc      	RCALL _lcd_init
                 ; 0000 0072 
                 ; 0000 0073 lcd_gotoxy(3,1);
0002ed d401      	RCALL SUBOPT_0x2
                 ; 0000 0074 lcd_puts("START GAME"); //게임 시작
                +
0002ee e0a0     +LDI R26 , LOW ( _0x1B + ( 0 ) )
0002ef e0b5     +LDI R27 , HIGH ( _0x1B + ( 0 ) )
                 	__POINTW2MN _0x1B,0
0002f0 d386      	RCALL _lcd_puts
                 ; 0000 0075 
                 ; 0000 0076 lcd_gotoxy(0,0);
0002f1 d401      	RCALL SUBOPT_0x3
                 ; 0000 0077 
                 ; 0000 0078 delay_ms(1000);
0002f2 eea8      	LDI  R26,LOW(1000)
0002f3 e0b3      	LDI  R27,HIGH(1000)
0002f4 d468      	RCALL _delay_ms
                 ; 0000 0079 
                 ; 0000 007A lcd_clear();
0002f5 d359      	RCALL _lcd_clear
                 ; 0000 007B 
                 ; 0000 007C /*if(mode == 16) {
                 ; 0000 007D lcd_gotoxy(0,1);
                 ; 0000 007E lcd_puts("0123456789ABCDEF"); //16모드일때 사용 가능한 스위치를 LCD에 출력
                 ; 0000 007F lcd_gotoxy(0,0); // 위치를 안잡으면 lcd오류발생
                 ; 0000 0080 }
                 ; 0000 0081 else if(mode == 8) {
                 ; 0000 0082 lcd_gotoxy(0,1);
                 ; 0000 0083 lcd_puts("01234567"); //8모드일때 사용 가능한 스위치를 lcd에 출력
                 ; 0000 0084 lcd_gotoxy(0,0); // 위치를 안잡으면 lcd오류발생
                 ; 0000 0085 } */
                 ; 0000 0086 
                 ; 0000 0087 lcd_gotoxy(0,0); // 위치를 안잡으면 lcd오류발생
0002f6 d3fc      	RCALL SUBOPT_0x3
                 ; 0000 0088 
                 ; 0000 0089 buzzer();
0002f7 df73      	RCALL _buzzer
                 ; 0000 008A 
                 ; 0000 008B delay_ms(500);
0002f8 efa4      	LDI  R26,LOW(500)
0002f9 e0b1      	LDI  R27,HIGH(500)
0002fa d462      	RCALL _delay_ms
                 ; 0000 008C 
                 ; 0000 008D while(tri) { //tri가 1일때 반복
                 _0x1C:
0002fb 2c06      	MOV  R0,R6
0002fc 2807      	OR   R0,R7
0002fd f409      	BRNE PC+2
0002fe c1d3      	RJMP _0x1E
                 ; 0000 008E keyout = 0xfe; //keyout에 1111 1110 저장
                +
0002ff ef0e     +LDI R16 , LOW ( 254 )
000300 e010     +LDI R17 , HIGH ( 254 )
                 	__GETWRN 16,17,254
                 ; 0000 008F for(i = 0; i<=3; i++) { //4x4임으로 반복문을 4번 돌려줌, ex)3x3 -> i = 0; i<=2; i++
                +
000301 e020     +LDI R18 , LOW ( 0 )
000302 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x20:
                +
000303 3024     +CPI R18 , LOW ( 4 )
000304 e0e0     +LDI R30 , HIGH ( 4 )
000305 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
000306 f00c      	BRLT PC+2
000307 c1c9      	RJMP _0x21
                 ; 0000 0090 PORTD = keyout; //행 스캔 출력
000308 bb02      	OUT  0x12,R16
                 ; 0000 0091 matrix = PIND; //매트릭스에 PIND값 저장
000309 b350      	IN   R21,16
                 ; 0000 0092 
                 ; 0000 0093 
                 ; 0000 0094 if(keyMatrix(matrix) == 0)  { //키매트릭스 함수의 switch문에 PIND값을 넣고, 리턴값이 0일때
00030a 2fa5      	MOV  R26,R21
00030b df67      	RCALL _keyMatrix
00030c 9730      	SBIW R30,0
00030d f481      	BRNE _0x22
                 ; 0000 0095 if(keyMatrix(matrix) != num) { //리턴값이 난수값과 같지 않을때
00030e d3e8      	RCALL SUBOPT_0x4
00030f f039      	BREQ _0x23
                 ; 0000 0096 PORTB = vertical[0]; //0번 스위치 해당하는 가로줄 호출
000310 91e0 0751 	LDS  R30,_vertical
000312 d3e9      	RCALL SUBOPT_0x5
                 ; 0000 0097 PORTC = green_led[0]; //0번 스위치 해당하는 세로줄 호출
                 ; 0000 0098 lcd_gotoxy(0,0);
                 ; 0000 0099 lcd_puts("0 SW is not bomb"); //해당 스위치 위치를 lcd 출력
                +
000313 e0ab     +LDI R26 , LOW ( _0x1B + ( 11 ) )
000314 e0b5     +LDI R27 , HIGH ( _0x1B + ( 11 ) )
                 	__POINTW2MN _0x1B,11
000315 d3eb      	RCALL SUBOPT_0x6
                 ; 0000 009A delay_us(500);
                 ; 0000 009B //lcd_gotoxy(0, 1);
                 ; 0000 009C //lcd_puts(" "); //lcd에 공백을 넣어 0번 스위치 비움
                 ; 0000 009D }
                 ; 0000 009E else { // sw번호 = num(난수)
000316 c007      	RJMP _0x24
                 _0x23:
                 ; 0000 009F PORTB = vertical[0]; //0번 스위치 해당하는 가로줄 호출
000317 91e0 0751 	LDS  R30,_vertical
000319 d3ed      	RCALL SUBOPT_0x7
                 ; 0000 00A0 PORTC = red_led[0]; //0번 스위치 붉은 부분에 해당하는 세로줄 호출
                 ; 0000 00A1 lcd_clear();
                 ; 0000 00A2 //lcd_gotoxy(0, 0);
                 ; 0000 00A3 //delay_ms(500);
                 ; 0000 00A4 //lcd_puts("0 SW is bomb"); //몇 번 스위치가 터졌는지 ㅣcd에 표시
                 ; 0000 00A5 lcd_gotoxy(6, 1);
00031a d3f1      	RCALL SUBOPT_0x8
                 ; 0000 00A6 lcd_puts("BOMB");
                +
00031b e1ac     +LDI R26 , LOW ( _0x1B + ( 28 ) )
00031c e0b5     +LDI R27 , HIGH ( _0x1B + ( 28 ) )
                 	__POINTW2MN _0x1B,28
00031d d3f2      	RCALL SUBOPT_0x9
                 ; 0000 00A7 buzzer2(); //buzzer on
                 ; 0000 00A8 delay_ms(3000);
                 ; 0000 00A9 buzzer_off(); //buzzer off
                 ; 0000 00AA brk = 1; //리셋문 반복 방지
                 ; 0000 00AB tri = 0; //while문 탈출
                 ; 0000 00AC }
                 _0x24:
                 ; 0000 00AD }
                 ; 0000 00AE 
                 ; 0000 00AF 
                 ; 0000 00B0 if(keyMatrix(matrix) == 1)  { //키매트릭스 함수의 리턴값이 1일때
                 _0x22:
00031e 2fa5      	MOV  R26,R21
00031f df53      	RCALL _keyMatrix
000320 30e1      	CPI  R30,LOW(0x1)
000321 e0a0      	LDI  R26,HIGH(0x1)
000322 07fa      	CPC  R31,R26
000323 f4a9      	BRNE _0x25
                 ; 0000 00B1 if(keyMatrix(matrix) != num) {
000324 d3d2      	RCALL SUBOPT_0x4
000325 f041      	BREQ _0x26
                 ; 0000 00B2 PORTB = vertical[0];
000326 91e0 0751 	LDS  R30,_vertical
000328 d3f3      	RCALL SUBOPT_0xA
                 ; 0000 00B3 PORTC = green_led[1];
                 ; 0000 00B4 lcd_gotoxy(0, 0);
                 ; 0000 00B5 delay_us(500);
000329 d3f7      	RCALL SUBOPT_0xB
                 ; 0000 00B6 lcd_puts("1 SW is not bomb"); //해당 스위치 위치 출력
                +
00032a e2a1     +LDI R26 , LOW ( _0x1B + ( 33 ) )
00032b e0b5     +LDI R27 , HIGH ( _0x1B + ( 33 ) )
                 	__POINTW2MN _0x1B,33
00032c d34a      	RCALL _lcd_puts
                 ; 0000 00B7 //lcd_gotoxy(1, 1);
                 ; 0000 00B8 //lcd_puts(" "); //lcd에서 1을 지움
                 ; 0000 00B9 }
                 ; 0000 00BA else {
00032d c00b      	RJMP _0x27
                 _0x26:
                 ; 0000 00BB PORTB = vertical[0];
00032e 91e0 0751 	LDS  R30,_vertical
000330 d3f5      	RCALL SUBOPT_0xC
                 ; 0000 00BC PORTC = red_led[1];
                 ; 0000 00BD lcd_clear();
                 ; 0000 00BE lcd_gotoxy(0, 0);
                 ; 0000 00BF delay_us(500);
000331 d3ef      	RCALL SUBOPT_0xB
                 ; 0000 00C0 lcd_puts("1 SW is bomb");
                +
000332 e3a2     +LDI R26 , LOW ( _0x1B + ( 50 ) )
000333 e0b5     +LDI R27 , HIGH ( _0x1B + ( 50 ) )
                 	__POINTW2MN _0x1B,50
000334 d342      	RCALL _lcd_puts
                 ; 0000 00C1 lcd_gotoxy(6, 1);
000335 d3d6      	RCALL SUBOPT_0x8
                 ; 0000 00C2 lcd_puts("BOMB");
                +
000336 e3af     +LDI R26 , LOW ( _0x1B + ( 63 ) )
000337 e0b5     +LDI R27 , HIGH ( _0x1B + ( 63 ) )
                 	__POINTW2MN _0x1B,63
000338 d3d7      	RCALL SUBOPT_0x9
                 ; 0000 00C3 buzzer2();
                 ; 0000 00C4 delay_ms(3000);
                 ; 0000 00C5 buzzer_off();
                 ; 0000 00C6 brk = 1;
                 ; 0000 00C7 tri = 0;
                 ; 0000 00C8 }
                 _0x27:
                 ; 0000 00C9 }
                 ; 0000 00CA 
                 ; 0000 00CB 
                 ; 0000 00CC if(keyMatrix(matrix) == 2)  {
                 _0x25:
000339 2fa5      	MOV  R26,R21
00033a df38      	RCALL _keyMatrix
00033b 30e2      	CPI  R30,LOW(0x2)
00033c e0a0      	LDI  R26,HIGH(0x2)
00033d 07fa      	CPC  R31,R26
00033e f4a9      	BRNE _0x28
                 ; 0000 00CD if(keyMatrix(matrix) != num) {
00033f d3b7      	RCALL SUBOPT_0x4
000340 f041      	BREQ _0x29
                 ; 0000 00CE PORTB = vertical[0];
000341 91e0 0751 	LDS  R30,_vertical
000343 d3e8      	RCALL SUBOPT_0xD
                 ; 0000 00CF PORTC = green_led[2];
                 ; 0000 00D0 lcd_gotoxy(0, 0);
                 ; 0000 00D1 delay_us(500);
000344 d3dc      	RCALL SUBOPT_0xB
                 ; 0000 00D2 lcd_puts("2 SW is not bomb");
                +
000345 e4a4     +LDI R26 , LOW ( _0x1B + ( 68 ) )
000346 e0b5     +LDI R27 , HIGH ( _0x1B + ( 68 ) )
                 	__POINTW2MN _0x1B,68
000347 d32f      	RCALL _lcd_puts
                 ; 0000 00D3 //lcd_gotoxy(2, 1);
                 ; 0000 00D4 //lcd_puts(" ");
                 ; 0000 00D5 }
                 ; 0000 00D6 else {
000348 c00b      	RJMP _0x2A
                 _0x29:
                 ; 0000 00D7 PORTB = vertical[0];
000349 91e0 0751 	LDS  R30,_vertical
00034b d3e5      	RCALL SUBOPT_0xE
                 ; 0000 00D8 PORTC = red_led[2];
                 ; 0000 00D9 lcd_clear();
                 ; 0000 00DA lcd_gotoxy(0, 0);
                 ; 0000 00DB delay_us(500);
00034c d3d4      	RCALL SUBOPT_0xB
                 ; 0000 00DC lcd_puts("2 SW is bomb");
                +
00034d e5a5     +LDI R26 , LOW ( _0x1B + ( 85 ) )
00034e e0b5     +LDI R27 , HIGH ( _0x1B + ( 85 ) )
                 	__POINTW2MN _0x1B,85
00034f d327      	RCALL _lcd_puts
                 ; 0000 00DD lcd_gotoxy(6, 1);
000350 d3bb      	RCALL SUBOPT_0x8
                 ; 0000 00DE lcd_puts("BOMB");
                +
000351 e6a2     +LDI R26 , LOW ( _0x1B + ( 98 ) )
000352 e0b5     +LDI R27 , HIGH ( _0x1B + ( 98 ) )
                 	__POINTW2MN _0x1B,98
000353 d3bc      	RCALL SUBOPT_0x9
                 ; 0000 00DF buzzer2();
                 ; 0000 00E0 delay_ms(3000);
                 ; 0000 00E1 buzzer_off();
                 ; 0000 00E2 brk = 1;
                 ; 0000 00E3 tri = 0;
                 ; 0000 00E4 }
                 _0x2A:
                 ; 0000 00E5 }
                 ; 0000 00E6 
                 ; 0000 00E7 if(keyMatrix(matrix) == 3)  {
                 _0x28:
000354 2fa5      	MOV  R26,R21
000355 df1d      	RCALL _keyMatrix
000356 30e3      	CPI  R30,LOW(0x3)
000357 e0a0      	LDI  R26,HIGH(0x3)
000358 07fa      	CPC  R31,R26
000359 f4a9      	BRNE _0x2B
                 ; 0000 00E8 if(keyMatrix(matrix) != num) {
00035a d39c      	RCALL SUBOPT_0x4
00035b f041      	BREQ _0x2C
                 ; 0000 00E9 PORTB = vertical[0];
00035c 91e0 0751 	LDS  R30,_vertical
00035e d3d8      	RCALL SUBOPT_0xF
                 ; 0000 00EA PORTC = green_led[3];
                 ; 0000 00EB lcd_gotoxy(0, 0);
                 ; 0000 00EC delay_us(500);
00035f d3c1      	RCALL SUBOPT_0xB
                 ; 0000 00ED lcd_puts("3 SW is not bomb");
                +
000360 e6a7     +LDI R26 , LOW ( _0x1B + ( 103 ) )
000361 e0b5     +LDI R27 , HIGH ( _0x1B + ( 103 ) )
                 	__POINTW2MN _0x1B,103
000362 d314      	RCALL _lcd_puts
                 ; 0000 00EE //lcd_gotoxy(3, 1);
                 ; 0000 00EF //lcd_puts(" ");
                 ; 0000 00F0 }
                 ; 0000 00F1 else {
000363 c00b      	RJMP _0x2D
                 _0x2C:
                 ; 0000 00F2 PORTB = vertical[0];
000364 91e0 0751 	LDS  R30,_vertical
000366 d3d5      	RCALL SUBOPT_0x10
                 ; 0000 00F3 PORTC = red_led[3];
                 ; 0000 00F4 lcd_clear();
                 ; 0000 00F5 lcd_gotoxy(0, 0);
                 ; 0000 00F6 delay_us(500);
000367 d3b9      	RCALL SUBOPT_0xB
                 ; 0000 00F7 lcd_puts("3 SW is bomb");
                +
000368 e7a8     +LDI R26 , LOW ( _0x1B + ( 120 ) )
000369 e0b5     +LDI R27 , HIGH ( _0x1B + ( 120 ) )
                 	__POINTW2MN _0x1B,120
00036a d30c      	RCALL _lcd_puts
                 ; 0000 00F8 lcd_gotoxy(6, 1);
00036b d3a0      	RCALL SUBOPT_0x8
                 ; 0000 00F9 lcd_puts("BOMB");
                +
00036c e8a5     +LDI R26 , LOW ( _0x1B + ( 133 ) )
00036d e0b5     +LDI R27 , HIGH ( _0x1B + ( 133 ) )
                 	__POINTW2MN _0x1B,133
00036e d3a1      	RCALL SUBOPT_0x9
                 ; 0000 00FA buzzer2();
                 ; 0000 00FB delay_ms(3000);
                 ; 0000 00FC buzzer_off();
                 ; 0000 00FD brk = 1;
                 ; 0000 00FE tri = 0;
                 ; 0000 00FF }
                 _0x2D:
                 ; 0000 0100 }
                 ; 0000 0101 
                 ; 0000 0102 if(keyMatrix(matrix) == 4)  {
                 _0x2B:
00036f 2fa5      	MOV  R26,R21
000370 df02      	RCALL _keyMatrix
000371 30e4      	CPI  R30,LOW(0x4)
000372 e0a0      	LDI  R26,HIGH(0x4)
000373 07fa      	CPC  R31,R26
000374 f4b1      	BRNE _0x2E
                 ; 0000 0103 if(keyMatrix(matrix) != num) {
000375 d381      	RCALL SUBOPT_0x4
000376 f041      	BREQ _0x2F
                 ; 0000 0104 PORTB = vertical[1];
                +
000377 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
000379 d382      	RCALL SUBOPT_0x5
                 ; 0000 0105 PORTC = green_led[0];
                 ; 0000 0106 lcd_gotoxy(0, 0);
                 ; 0000 0107 delay_us(500);
00037a d3a6      	RCALL SUBOPT_0xB
                 ; 0000 0108 lcd_puts("4 SW is not bomb");
                +
00037b e8aa     +LDI R26 , LOW ( _0x1B + ( 138 ) )
00037c e0b5     +LDI R27 , HIGH ( _0x1B + ( 138 ) )
                 	__POINTW2MN _0x1B,138
00037d d2f9      	RCALL _lcd_puts
                 ; 0000 0109 //lcd_gotoxy(4, 1);
                 ; 0000 010A //lcd_puts(" ");
                 ; 0000 010B }
                 ; 0000 010C else {
00037e c00c      	RJMP _0x30
                 _0x2F:
                 ; 0000 010D PORTB = vertical[1];
                +
00037f 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
000381 d385      	RCALL SUBOPT_0x7
                 ; 0000 010E PORTC = red_led[0];
                 ; 0000 010F lcd_clear();
                 ; 0000 0110 lcd_gotoxy(0, 0);
000382 d370      	RCALL SUBOPT_0x3
                 ; 0000 0111 delay_us(500);
000383 d39d      	RCALL SUBOPT_0xB
                 ; 0000 0112 lcd_puts("4 SW is bomb");
                +
000384 e9ab     +LDI R26 , LOW ( _0x1B + ( 155 ) )
000385 e0b5     +LDI R27 , HIGH ( _0x1B + ( 155 ) )
                 	__POINTW2MN _0x1B,155
000386 d2f0      	RCALL _lcd_puts
                 ; 0000 0113 lcd_gotoxy(6, 1);
000387 d384      	RCALL SUBOPT_0x8
                 ; 0000 0114 lcd_puts("BOMB");
                +
000388 eaa8     +LDI R26 , LOW ( _0x1B + ( 168 ) )
000389 e0b5     +LDI R27 , HIGH ( _0x1B + ( 168 ) )
                 	__POINTW2MN _0x1B,168
00038a d385      	RCALL SUBOPT_0x9
                 ; 0000 0115 buzzer2();
                 ; 0000 0116 delay_ms(3000);
                 ; 0000 0117 buzzer_off();
                 ; 0000 0118 brk = 1;
                 ; 0000 0119 tri = 0;
                 ; 0000 011A }
                 _0x30:
                 ; 0000 011B }
                 ; 0000 011C 
                 ; 0000 011D if(keyMatrix(matrix) == 5)  {
                 _0x2E:
00038b 2fa5      	MOV  R26,R21
00038c dee6      	RCALL _keyMatrix
00038d 30e5      	CPI  R30,LOW(0x5)
00038e e0a0      	LDI  R26,HIGH(0x5)
00038f 07fa      	CPC  R31,R26
000390 f4a9      	BRNE _0x31
                 ; 0000 011E if(keyMatrix(matrix) != num) {
000391 d365      	RCALL SUBOPT_0x4
000392 f041      	BREQ _0x32
                 ; 0000 011F PORTB = vertical[1];
                +
000393 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
000395 d386      	RCALL SUBOPT_0xA
                 ; 0000 0120 PORTC = green_led[1];
                 ; 0000 0121 lcd_gotoxy(0, 0);
                 ; 0000 0122 delay_us(500);
000396 d38a      	RCALL SUBOPT_0xB
                 ; 0000 0123 lcd_puts("5 SW is not bomb");
                +
000397 eaad     +LDI R26 , LOW ( _0x1B + ( 173 ) )
000398 e0b5     +LDI R27 , HIGH ( _0x1B + ( 173 ) )
                 	__POINTW2MN _0x1B,173
000399 d2dd      	RCALL _lcd_puts
                 ; 0000 0124 //lcd_gotoxy(5, 1);
                 ; 0000 0125 //lcd_puts(" ");
                 ; 0000 0126 }
                 ; 0000 0127 else {
00039a c00b      	RJMP _0x33
                 _0x32:
                 ; 0000 0128 PORTB = vertical[1];
                +
00039b 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
00039d d388      	RCALL SUBOPT_0xC
                 ; 0000 0129 PORTC = red_led[1];
                 ; 0000 012A lcd_clear();
                 ; 0000 012B lcd_gotoxy(0, 0);
                 ; 0000 012C delay_us(500);
00039e d382      	RCALL SUBOPT_0xB
                 ; 0000 012D lcd_puts("5 SW is bomb");
                +
00039f ebae     +LDI R26 , LOW ( _0x1B + ( 190 ) )
0003a0 e0b5     +LDI R27 , HIGH ( _0x1B + ( 190 ) )
                 	__POINTW2MN _0x1B,190
0003a1 d2d5      	RCALL _lcd_puts
                 ; 0000 012E lcd_gotoxy(6, 1);
0003a2 d369      	RCALL SUBOPT_0x8
                 ; 0000 012F lcd_puts("BOMB");
                +
0003a3 ecab     +LDI R26 , LOW ( _0x1B + ( 203 ) )
0003a4 e0b5     +LDI R27 , HIGH ( _0x1B + ( 203 ) )
                 	__POINTW2MN _0x1B,203
0003a5 d36a      	RCALL SUBOPT_0x9
                 ; 0000 0130 buzzer2();
                 ; 0000 0131 delay_ms(3000);
                 ; 0000 0132 buzzer_off();
                 ; 0000 0133 brk = 1;
                 ; 0000 0134 tri = 0;
                 ; 0000 0135 }
                 _0x33:
                 ; 0000 0136 }
                 ; 0000 0137 
                 ; 0000 0138 if(keyMatrix(matrix) == 6)  {
                 _0x31:
0003a6 2fa5      	MOV  R26,R21
0003a7 decb      	RCALL _keyMatrix
0003a8 30e6      	CPI  R30,LOW(0x6)
0003a9 e0a0      	LDI  R26,HIGH(0x6)
0003aa 07fa      	CPC  R31,R26
0003ab f4a9      	BRNE _0x34
                 ; 0000 0139 if(keyMatrix(matrix) != num) {
0003ac d34a      	RCALL SUBOPT_0x4
0003ad f041      	BREQ _0x35
                 ; 0000 013A PORTB = vertical[1];
                +
0003ae 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
0003b0 d37b      	RCALL SUBOPT_0xD
                 ; 0000 013B PORTC = green_led[2];
                 ; 0000 013C lcd_gotoxy(0, 0);
                 ; 0000 013D delay_us(500);
0003b1 d36f      	RCALL SUBOPT_0xB
                 ; 0000 013E lcd_puts("6 SW is not bomb");
                +
0003b2 eda0     +LDI R26 , LOW ( _0x1B + ( 208 ) )
0003b3 e0b5     +LDI R27 , HIGH ( _0x1B + ( 208 ) )
                 	__POINTW2MN _0x1B,208
0003b4 d2c2      	RCALL _lcd_puts
                 ; 0000 013F //lcd_gotoxy(6, 1);
                 ; 0000 0140 //lcd_puts(" ");
                 ; 0000 0141 }
                 ; 0000 0142 else {
0003b5 c00b      	RJMP _0x36
                 _0x35:
                 ; 0000 0143 PORTB = vertical[1];
                +
0003b6 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
0003b8 d378      	RCALL SUBOPT_0xE
                 ; 0000 0144 PORTC = red_led[2];
                 ; 0000 0145 lcd_clear();
                 ; 0000 0146 lcd_gotoxy(0, 0);
                 ; 0000 0147 delay_us(500);
0003b9 d367      	RCALL SUBOPT_0xB
                 ; 0000 0148 lcd_puts("6 SW is bomb");
                +
0003ba eea1     +LDI R26 , LOW ( _0x1B + ( 225 ) )
0003bb e0b5     +LDI R27 , HIGH ( _0x1B + ( 225 ) )
                 	__POINTW2MN _0x1B,225
0003bc d2ba      	RCALL _lcd_puts
                 ; 0000 0149 lcd_gotoxy(6, 1);
0003bd d34e      	RCALL SUBOPT_0x8
                 ; 0000 014A lcd_puts("BOMB");
                +
0003be eeae     +LDI R26 , LOW ( _0x1B + ( 238 ) )
0003bf e0b5     +LDI R27 , HIGH ( _0x1B + ( 238 ) )
                 	__POINTW2MN _0x1B,238
0003c0 d34f      	RCALL SUBOPT_0x9
                 ; 0000 014B buzzer2();
                 ; 0000 014C delay_ms(3000);
                 ; 0000 014D buzzer_off();
                 ; 0000 014E brk = 1;
                 ; 0000 014F tri = 0;
                 ; 0000 0150 }
                 _0x36:
                 ; 0000 0151 }
                 ; 0000 0152 
                 ; 0000 0153 if(keyMatrix(matrix) == 7)  {
                 _0x34:
0003c1 2fa5      	MOV  R26,R21
0003c2 deb0      	RCALL _keyMatrix
0003c3 30e7      	CPI  R30,LOW(0x7)
0003c4 e0a0      	LDI  R26,HIGH(0x7)
0003c5 07fa      	CPC  R31,R26
0003c6 f4a9      	BRNE _0x37
                 ; 0000 0154 if(keyMatrix(matrix) != num) {
0003c7 d32f      	RCALL SUBOPT_0x4
0003c8 f041      	BREQ _0x38
                 ; 0000 0155 PORTB = vertical[1];
                +
0003c9 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
0003cb d36b      	RCALL SUBOPT_0xF
                 ; 0000 0156 PORTC = green_led[3];
                 ; 0000 0157 lcd_gotoxy(0, 0);
                 ; 0000 0158 delay_us(500);
0003cc d354      	RCALL SUBOPT_0xB
                 ; 0000 0159 lcd_puts("7 SW is not bomb");
                +
0003cd efa3     +LDI R26 , LOW ( _0x1B + ( 243 ) )
0003ce e0b5     +LDI R27 , HIGH ( _0x1B + ( 243 ) )
                 	__POINTW2MN _0x1B,243
0003cf d2a7      	RCALL _lcd_puts
                 ; 0000 015A //lcd_gotoxy(7, 1);
                 ; 0000 015B //lcd_puts(" ");
                 ; 0000 015C }
                 ; 0000 015D else {
0003d0 c00b      	RJMP _0x39
                 _0x38:
                 ; 0000 015E PORTB = vertical[1];
                +
0003d1 91e0 0752+LDS R30 , _vertical + ( 1 )
                 	__GETB1MN _vertical,1
0003d3 d368      	RCALL SUBOPT_0x10
                 ; 0000 015F PORTC = red_led[3];
                 ; 0000 0160 lcd_clear();
                 ; 0000 0161 lcd_gotoxy(0, 0);
                 ; 0000 0162 delay_us(500);
0003d4 d34c      	RCALL SUBOPT_0xB
                 ; 0000 0163 lcd_puts("7 SW is bomb");
                +
0003d5 e0a4     +LDI R26 , LOW ( _0x1B + ( 260 ) )
0003d6 e0b6     +LDI R27 , HIGH ( _0x1B + ( 260 ) )
                 	__POINTW2MN _0x1B,260
0003d7 d29f      	RCALL _lcd_puts
                 ; 0000 0164 lcd_gotoxy(6, 1);
0003d8 d333      	RCALL SUBOPT_0x8
                 ; 0000 0165 lcd_puts("BOMB");
                +
0003d9 e1a1     +LDI R26 , LOW ( _0x1B + ( 273 ) )
0003da e0b6     +LDI R27 , HIGH ( _0x1B + ( 273 ) )
                 	__POINTW2MN _0x1B,273
0003db d334      	RCALL SUBOPT_0x9
                 ; 0000 0166 buzzer2();
                 ; 0000 0167 delay_ms(3000);
                 ; 0000 0168 buzzer_off();
                 ; 0000 0169 brk = 1;
                 ; 0000 016A tri = 0;
                 ; 0000 016B }
                 _0x39:
                 ; 0000 016C }
                 ; 0000 016D 
                 ; 0000 016E if(mode == 16) { //모드 16일때만 8번~15번 스위치를 누를 수 있게 설정
                 _0x37:
0003dc d365      	RCALL SUBOPT_0x11
0003dd f4e1      	BRNE _0x3A
                 ; 0000 016F if(keyMatrix(matrix) == 8)  {
0003de 2fa5      	MOV  R26,R21
0003df de93      	RCALL _keyMatrix
0003e0 30e8      	CPI  R30,LOW(0x8)
0003e1 e0a0      	LDI  R26,HIGH(0x8)
0003e2 07fa      	CPC  R31,R26
0003e3 f4b1      	BRNE _0x3B
                 ; 0000 0170 if(keyMatrix(matrix) != num) {
0003e4 d312      	RCALL SUBOPT_0x4
0003e5 f041      	BREQ _0x3C
                 ; 0000 0171 PORTB = vertical[2];
                +
0003e6 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
0003e8 d313      	RCALL SUBOPT_0x5
                 ; 0000 0172 PORTC = green_led[0];
                 ; 0000 0173 lcd_gotoxy(0, 0);
                 ; 0000 0174 delay_us(500);
0003e9 d337      	RCALL SUBOPT_0xB
                 ; 0000 0175 lcd_puts("8 SW is not bomb");
                +
0003ea e1a6     +LDI R26 , LOW ( _0x1B + ( 278 ) )
0003eb e0b6     +LDI R27 , HIGH ( _0x1B + ( 278 ) )
                 	__POINTW2MN _0x1B,278
0003ec d28a      	RCALL _lcd_puts
                 ; 0000 0176 //lcd_gotoxy(8, 1);
                 ; 0000 0177 //lcd_puts(" ");
                 ; 0000 0178 }
                 ; 0000 0179 else {
0003ed c00c      	RJMP _0x3D
                 _0x3C:
                 ; 0000 017A PORTB = vertical[2];
                +
0003ee 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
0003f0 d316      	RCALL SUBOPT_0x7
                 ; 0000 017B PORTC = red_led[0];
                 ; 0000 017C lcd_clear();
                 ; 0000 017D lcd_gotoxy(0, 0);
0003f1 d301      	RCALL SUBOPT_0x3
                 ; 0000 017E delay_us(500);
0003f2 d32e      	RCALL SUBOPT_0xB
                 ; 0000 017F lcd_puts("8 SW is bomb");
                +
0003f3 e2a7     +LDI R26 , LOW ( _0x1B + ( 295 ) )
0003f4 e0b6     +LDI R27 , HIGH ( _0x1B + ( 295 ) )
                 	__POINTW2MN _0x1B,295
0003f5 d281      	RCALL _lcd_puts
                 ; 0000 0180 lcd_gotoxy(6, 1);
0003f6 d315      	RCALL SUBOPT_0x8
                 ; 0000 0181 lcd_puts("BOMB");
                +
0003f7 e3a4     +LDI R26 , LOW ( _0x1B + ( 308 ) )
0003f8 e0b6     +LDI R27 , HIGH ( _0x1B + ( 308 ) )
                 	__POINTW2MN _0x1B,308
0003f9 d316      	RCALL SUBOPT_0x9
                 ; 0000 0182 buzzer2();
                 ; 0000 0183 delay_ms(3000);
                 ; 0000 0184 buzzer_off();
                 ; 0000 0185 brk = 1;
                 ; 0000 0186 tri = 0;
                 ; 0000 0187 }
                 _0x3D:
                 ; 0000 0188 }
                 ; 0000 0189 }
                 _0x3B:
                 ; 0000 018A 
                 ; 0000 018B 
                 ; 0000 018C if(mode == 16) {
                 _0x3A:
0003fa d347      	RCALL SUBOPT_0x11
0003fb f4d9      	BRNE _0x3E
                 ; 0000 018D if(keyMatrix(matrix) == 9)  {
0003fc 2fa5      	MOV  R26,R21
0003fd de75      	RCALL _keyMatrix
0003fe 30e9      	CPI  R30,LOW(0x9)
0003ff e0a0      	LDI  R26,HIGH(0x9)
000400 07fa      	CPC  R31,R26
000401 f4a9      	BRNE _0x3F
                 ; 0000 018E if(keyMatrix(matrix) != num) {
000402 d2f4      	RCALL SUBOPT_0x4
000403 f041      	BREQ _0x40
                 ; 0000 018F PORTB = vertical[2];
                +
000404 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
000406 d315      	RCALL SUBOPT_0xA
                 ; 0000 0190 PORTC = green_led[1];
                 ; 0000 0191 lcd_gotoxy(0, 0);
                 ; 0000 0192 delay_us(500);
000407 d319      	RCALL SUBOPT_0xB
                 ; 0000 0193 lcd_puts("9 SW is not bomb");
                +
000408 e3a9     +LDI R26 , LOW ( _0x1B + ( 313 ) )
000409 e0b6     +LDI R27 , HIGH ( _0x1B + ( 313 ) )
                 	__POINTW2MN _0x1B,313
00040a d26c      	RCALL _lcd_puts
                 ; 0000 0194 //lcd_gotoxy(9, 1);
                 ; 0000 0195 //lcd_puts(" ");
                 ; 0000 0196 }
                 ; 0000 0197 else {
00040b c00b      	RJMP _0x41
                 _0x40:
                 ; 0000 0198 PORTB = vertical[2];
                +
00040c 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
00040e d317      	RCALL SUBOPT_0xC
                 ; 0000 0199 PORTC = red_led[1];
                 ; 0000 019A lcd_clear();
                 ; 0000 019B lcd_gotoxy(0, 0);
                 ; 0000 019C delay_us(500);
00040f d311      	RCALL SUBOPT_0xB
                 ; 0000 019D lcd_puts("9 SW is bomb");
                +
000410 e4aa     +LDI R26 , LOW ( _0x1B + ( 330 ) )
000411 e0b6     +LDI R27 , HIGH ( _0x1B + ( 330 ) )
                 	__POINTW2MN _0x1B,330
000412 d264      	RCALL _lcd_puts
                 ; 0000 019E lcd_gotoxy(6, 1);
000413 d2f8      	RCALL SUBOPT_0x8
                 ; 0000 019F lcd_puts("BOMB");
                +
000414 e5a7     +LDI R26 , LOW ( _0x1B + ( 343 ) )
000415 e0b6     +LDI R27 , HIGH ( _0x1B + ( 343 ) )
                 	__POINTW2MN _0x1B,343
000416 d2f9      	RCALL SUBOPT_0x9
                 ; 0000 01A0 buzzer2();
                 ; 0000 01A1 delay_ms(3000);
                 ; 0000 01A2 buzzer_off();
                 ; 0000 01A3 brk = 1;
                 ; 0000 01A4 tri = 0;
                 ; 0000 01A5 }
                 _0x41:
                 ; 0000 01A6 }
                 ; 0000 01A7 }
                 _0x3F:
                 ; 0000 01A8 
                 ; 0000 01A9 
                 ; 0000 01AA if(mode == 16) {
                 _0x3E:
000417 d32a      	RCALL SUBOPT_0x11
000418 f4d9      	BRNE _0x42
                 ; 0000 01AB if(keyMatrix(matrix) == 10)  {
000419 2fa5      	MOV  R26,R21
00041a de58      	RCALL _keyMatrix
00041b 30ea      	CPI  R30,LOW(0xA)
00041c e0a0      	LDI  R26,HIGH(0xA)
00041d 07fa      	CPC  R31,R26
00041e f4a9      	BRNE _0x43
                 ; 0000 01AC if(keyMatrix(matrix) != num) {
00041f d2d7      	RCALL SUBOPT_0x4
000420 f041      	BREQ _0x44
                 ; 0000 01AD PORTB = vertical[2];
                +
000421 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
000423 d308      	RCALL SUBOPT_0xD
                 ; 0000 01AE PORTC = green_led[2];
                 ; 0000 01AF lcd_gotoxy(0, 0);
                 ; 0000 01B0 delay_us(500);
000424 d2fc      	RCALL SUBOPT_0xB
                 ; 0000 01B1 lcd_puts("A SW is not bomb");
                +
000425 e5ac     +LDI R26 , LOW ( _0x1B + ( 348 ) )
000426 e0b6     +LDI R27 , HIGH ( _0x1B + ( 348 ) )
                 	__POINTW2MN _0x1B,348
000427 d24f      	RCALL _lcd_puts
                 ; 0000 01B2 //lcd_gotoxy(10, 1);
                 ; 0000 01B3 //lcd_puts(" ");
                 ; 0000 01B4 }
                 ; 0000 01B5 else {
000428 c00b      	RJMP _0x45
                 _0x44:
                 ; 0000 01B6 PORTB = vertical[2];
                +
000429 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
00042b d305      	RCALL SUBOPT_0xE
                 ; 0000 01B7 PORTC = red_led[2];
                 ; 0000 01B8 lcd_clear();
                 ; 0000 01B9 lcd_gotoxy(0, 0);
                 ; 0000 01BA delay_us(500);
00042c d2f4      	RCALL SUBOPT_0xB
                 ; 0000 01BB lcd_puts("A SW is bomb");
                +
00042d e6ad     +LDI R26 , LOW ( _0x1B + ( 365 ) )
00042e e0b6     +LDI R27 , HIGH ( _0x1B + ( 365 ) )
                 	__POINTW2MN _0x1B,365
00042f d247      	RCALL _lcd_puts
                 ; 0000 01BC lcd_gotoxy(6, 1);
000430 d2db      	RCALL SUBOPT_0x8
                 ; 0000 01BD lcd_puts("BOMB");
                +
000431 e7aa     +LDI R26 , LOW ( _0x1B + ( 378 ) )
000432 e0b6     +LDI R27 , HIGH ( _0x1B + ( 378 ) )
                 	__POINTW2MN _0x1B,378
000433 d2dc      	RCALL SUBOPT_0x9
                 ; 0000 01BE buzzer2();
                 ; 0000 01BF delay_ms(3000);
                 ; 0000 01C0 buzzer_off();
                 ; 0000 01C1 brk = 1;
                 ; 0000 01C2 tri = 0;
                 ; 0000 01C3 }
                 _0x45:
                 ; 0000 01C4 }
                 ; 0000 01C5 }
                 _0x43:
                 ; 0000 01C6 
                 ; 0000 01C7 if(mode == 16) {
                 _0x42:
000434 d30d      	RCALL SUBOPT_0x11
000435 f4d9      	BRNE _0x46
                 ; 0000 01C8 if(keyMatrix(matrix) == 11)  {
000436 2fa5      	MOV  R26,R21
000437 de3b      	RCALL _keyMatrix
000438 30eb      	CPI  R30,LOW(0xB)
000439 e0a0      	LDI  R26,HIGH(0xB)
00043a 07fa      	CPC  R31,R26
00043b f4a9      	BRNE _0x47
                 ; 0000 01C9 if(keyMatrix(matrix) != num) {
00043c d2ba      	RCALL SUBOPT_0x4
00043d f041      	BREQ _0x48
                 ; 0000 01CA PORTB = vertical[2];
                +
00043e 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
000440 d2f6      	RCALL SUBOPT_0xF
                 ; 0000 01CB PORTC = green_led[3];
                 ; 0000 01CC lcd_gotoxy(0, 0);
                 ; 0000 01CD delay_us(500);
000441 d2df      	RCALL SUBOPT_0xB
                 ; 0000 01CE lcd_puts("B SW is not bomb");
                +
000442 e7af     +LDI R26 , LOW ( _0x1B + ( 383 ) )
000443 e0b6     +LDI R27 , HIGH ( _0x1B + ( 383 ) )
                 	__POINTW2MN _0x1B,383
000444 d232      	RCALL _lcd_puts
                 ; 0000 01CF //lcd_gotoxy(11, 1);
                 ; 0000 01D0 //lcd_puts(" ");
                 ; 0000 01D1 }
                 ; 0000 01D2 else {
000445 c00b      	RJMP _0x49
                 _0x48:
                 ; 0000 01D3 PORTB = vertical[2];
                +
000446 91e0 0753+LDS R30 , _vertical + ( 2 )
                 	__GETB1MN _vertical,2
000448 d2f3      	RCALL SUBOPT_0x10
                 ; 0000 01D4 PORTC = red_led[3];
                 ; 0000 01D5 lcd_clear();
                 ; 0000 01D6 lcd_gotoxy(0, 0);
                 ; 0000 01D7 delay_us(500);
000449 d2d7      	RCALL SUBOPT_0xB
                 ; 0000 01D8 lcd_puts("B SW is bomb");
                +
00044a e9a0     +LDI R26 , LOW ( _0x1B + ( 400 ) )
00044b e0b6     +LDI R27 , HIGH ( _0x1B + ( 400 ) )
                 	__POINTW2MN _0x1B,400
00044c d22a      	RCALL _lcd_puts
                 ; 0000 01D9 lcd_gotoxy(6, 1);
00044d d2be      	RCALL SUBOPT_0x8
                 ; 0000 01DA lcd_puts("BOMB");
                +
00044e e9ad     +LDI R26 , LOW ( _0x1B + ( 413 ) )
00044f e0b6     +LDI R27 , HIGH ( _0x1B + ( 413 ) )
                 	__POINTW2MN _0x1B,413
000450 d2bf      	RCALL SUBOPT_0x9
                 ; 0000 01DB buzzer2();
                 ; 0000 01DC delay_ms(3000);
                 ; 0000 01DD buzzer_off();
                 ; 0000 01DE brk = 1;
                 ; 0000 01DF tri = 0;
                 ; 0000 01E0 }
                 _0x49:
                 ; 0000 01E1 }
                 ; 0000 01E2 }
                 _0x47:
                 ; 0000 01E3 
                 ; 0000 01E4 if(mode == 16) {
                 _0x46:
000451 d2f0      	RCALL SUBOPT_0x11
000452 f4e1      	BRNE _0x4A
                 ; 0000 01E5 if(keyMatrix(matrix) == 12)  {
000453 2fa5      	MOV  R26,R21
000454 de1e      	RCALL _keyMatrix
000455 30ec      	CPI  R30,LOW(0xC)
000456 e0a0      	LDI  R26,HIGH(0xC)
000457 07fa      	CPC  R31,R26
000458 f4b1      	BRNE _0x4B
                 ; 0000 01E6 if(keyMatrix(matrix) != num) {
000459 d29d      	RCALL SUBOPT_0x4
00045a f041      	BREQ _0x4C
                 ; 0000 01E7 PORTB = vertical[3];
                +
00045b 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
00045d d29e      	RCALL SUBOPT_0x5
                 ; 0000 01E8 PORTC = green_led[0];
                 ; 0000 01E9 lcd_gotoxy(0, 0);
                 ; 0000 01EA delay_us(500);
00045e d2c2      	RCALL SUBOPT_0xB
                 ; 0000 01EB lcd_puts("C SW is not bomb");
                +
00045f eaa2     +LDI R26 , LOW ( _0x1B + ( 418 ) )
000460 e0b6     +LDI R27 , HIGH ( _0x1B + ( 418 ) )
                 	__POINTW2MN _0x1B,418
000461 d215      	RCALL _lcd_puts
                 ; 0000 01EC //lcd_gotoxy(12, 1);
                 ; 0000 01ED //lcd_puts(" ");
                 ; 0000 01EE }
                 ; 0000 01EF else {
000462 c00c      	RJMP _0x4D
                 _0x4C:
                 ; 0000 01F0 PORTB = vertical[3];
                +
000463 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
000465 d2a1      	RCALL SUBOPT_0x7
                 ; 0000 01F1 PORTC = red_led[0];
                 ; 0000 01F2 lcd_clear();
                 ; 0000 01F3 lcd_gotoxy(0, 0);
000466 d28c      	RCALL SUBOPT_0x3
                 ; 0000 01F4 delay_us(500);
000467 d2b9      	RCALL SUBOPT_0xB
                 ; 0000 01F5 lcd_puts("C SW is bomb");
                +
000468 eba3     +LDI R26 , LOW ( _0x1B + ( 435 ) )
000469 e0b6     +LDI R27 , HIGH ( _0x1B + ( 435 ) )
                 	__POINTW2MN _0x1B,435
00046a d20c      	RCALL _lcd_puts
                 ; 0000 01F6 lcd_gotoxy(6, 1);
00046b d2a0      	RCALL SUBOPT_0x8
                 ; 0000 01F7 lcd_puts("BOMB");
                +
00046c eca0     +LDI R26 , LOW ( _0x1B + ( 448 ) )
00046d e0b6     +LDI R27 , HIGH ( _0x1B + ( 448 ) )
                 	__POINTW2MN _0x1B,448
00046e d2a1      	RCALL SUBOPT_0x9
                 ; 0000 01F8 buzzer2();
                 ; 0000 01F9 delay_ms(3000);
                 ; 0000 01FA buzzer_off();
                 ; 0000 01FB brk = 1;
                 ; 0000 01FC tri = 0;
                 ; 0000 01FD }
                 _0x4D:
                 ; 0000 01FE }
                 ; 0000 01FF }
                 _0x4B:
                 ; 0000 0200 
                 ; 0000 0201 if(mode == 16) {
                 _0x4A:
00046f d2d2      	RCALL SUBOPT_0x11
000470 f4d9      	BRNE _0x4E
                 ; 0000 0202 if(keyMatrix(matrix) == 13)  {
000471 2fa5      	MOV  R26,R21
000472 de00      	RCALL _keyMatrix
000473 30ed      	CPI  R30,LOW(0xD)
000474 e0a0      	LDI  R26,HIGH(0xD)
000475 07fa      	CPC  R31,R26
000476 f4a9      	BRNE _0x4F
                 ; 0000 0203 if(keyMatrix(matrix) != num) {
000477 d27f      	RCALL SUBOPT_0x4
000478 f041      	BREQ _0x50
                 ; 0000 0204 PORTB = vertical[3];
                +
000479 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
00047b d2a0      	RCALL SUBOPT_0xA
                 ; 0000 0205 PORTC = green_led[1];
                 ; 0000 0206 lcd_gotoxy(0, 0);
                 ; 0000 0207 delay_us(500);
00047c d2a4      	RCALL SUBOPT_0xB
                 ; 0000 0208 lcd_puts("D SW is not bomb");
                +
00047d eca5     +LDI R26 , LOW ( _0x1B + ( 453 ) )
00047e e0b6     +LDI R27 , HIGH ( _0x1B + ( 453 ) )
                 	__POINTW2MN _0x1B,453
00047f d1f7      	RCALL _lcd_puts
                 ; 0000 0209 //lcd_gotoxy(13, 1);
                 ; 0000 020A //lcd_puts(" ");
                 ; 0000 020B }
                 ; 0000 020C else {
000480 c00b      	RJMP _0x51
                 _0x50:
                 ; 0000 020D PORTB = vertical[3];
                +
000481 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
000483 d2a2      	RCALL SUBOPT_0xC
                 ; 0000 020E PORTC = red_led[1];
                 ; 0000 020F lcd_clear();
                 ; 0000 0210 lcd_gotoxy(0, 0);
                 ; 0000 0211 delay_us(500);
000484 d29c      	RCALL SUBOPT_0xB
                 ; 0000 0212 lcd_puts("D SW is bomb");
                +
000485 eda6     +LDI R26 , LOW ( _0x1B + ( 470 ) )
000486 e0b6     +LDI R27 , HIGH ( _0x1B + ( 470 ) )
                 	__POINTW2MN _0x1B,470
000487 d1ef      	RCALL _lcd_puts
                 ; 0000 0213 lcd_gotoxy(6, 1);
000488 d283      	RCALL SUBOPT_0x8
                 ; 0000 0214 lcd_puts("BOMB");
                +
000489 eea3     +LDI R26 , LOW ( _0x1B + ( 483 ) )
00048a e0b6     +LDI R27 , HIGH ( _0x1B + ( 483 ) )
                 	__POINTW2MN _0x1B,483
00048b d284      	RCALL SUBOPT_0x9
                 ; 0000 0215 buzzer2();
                 ; 0000 0216 delay_ms(3000);
                 ; 0000 0217 buzzer_off();
                 ; 0000 0218 brk = 1;
                 ; 0000 0219 tri = 0;
                 ; 0000 021A }
                 _0x51:
                 ; 0000 021B }
                 ; 0000 021C }
                 _0x4F:
                 ; 0000 021D 
                 ; 0000 021E if(mode == 16) {
                 _0x4E:
00048c d2b5      	RCALL SUBOPT_0x11
00048d f4d9      	BRNE _0x52
                 ; 0000 021F if(keyMatrix(matrix) == 14)  {
00048e 2fa5      	MOV  R26,R21
00048f dde3      	RCALL _keyMatrix
000490 30ee      	CPI  R30,LOW(0xE)
000491 e0a0      	LDI  R26,HIGH(0xE)
000492 07fa      	CPC  R31,R26
000493 f4a9      	BRNE _0x53
                 ; 0000 0220 if(keyMatrix(matrix) != num) {
000494 d262      	RCALL SUBOPT_0x4
000495 f041      	BREQ _0x54
                 ; 0000 0221 PORTB = vertical[3];
                +
000496 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
000498 d293      	RCALL SUBOPT_0xD
                 ; 0000 0222 PORTC = green_led[2];
                 ; 0000 0223 lcd_gotoxy(0, 0);
                 ; 0000 0224 delay_us(500);
000499 d287      	RCALL SUBOPT_0xB
                 ; 0000 0225 lcd_puts("E SW is not bomb");
                +
00049a eea8     +LDI R26 , LOW ( _0x1B + ( 488 ) )
00049b e0b6     +LDI R27 , HIGH ( _0x1B + ( 488 ) )
                 	__POINTW2MN _0x1B,488
00049c d1da      	RCALL _lcd_puts
                 ; 0000 0226 //lcd_gotoxy(14, 1);
                 ; 0000 0227 //lcd_puts(" ");
                 ; 0000 0228 }
                 ; 0000 0229 else {
00049d c00b      	RJMP _0x55
                 _0x54:
                 ; 0000 022A PORTB = vertical[3];
                +
00049e 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
0004a0 d290      	RCALL SUBOPT_0xE
                 ; 0000 022B PORTC = red_led[2];
                 ; 0000 022C lcd_clear();
                 ; 0000 022D lcd_gotoxy(0, 0);
                 ; 0000 022E delay_us(500);
0004a1 d27f      	RCALL SUBOPT_0xB
                 ; 0000 022F lcd_puts("E SW is bomb");
                +
0004a2 efa9     +LDI R26 , LOW ( _0x1B + ( 505 ) )
0004a3 e0b6     +LDI R27 , HIGH ( _0x1B + ( 505 ) )
                 	__POINTW2MN _0x1B,505
0004a4 d1d2      	RCALL _lcd_puts
                 ; 0000 0230 lcd_gotoxy(6, 1);
0004a5 d266      	RCALL SUBOPT_0x8
                 ; 0000 0231 lcd_puts("BOMB");
                +
0004a6 e0a6     +LDI R26 , LOW ( _0x1B + ( 518 ) )
0004a7 e0b7     +LDI R27 , HIGH ( _0x1B + ( 518 ) )
                 	__POINTW2MN _0x1B,518
0004a8 d267      	RCALL SUBOPT_0x9
                 ; 0000 0232 buzzer2();
                 ; 0000 0233 delay_ms(3000);
                 ; 0000 0234 buzzer_off();
                 ; 0000 0235 brk = 1;
                 ; 0000 0236 tri = 0;
                 ; 0000 0237 }
                 _0x55:
                 ; 0000 0238 }
                 ; 0000 0239 }
                 _0x53:
                 ; 0000 023A 
                 ; 0000 023B if(mode == 16) {
                 _0x52:
0004a9 d298      	RCALL SUBOPT_0x11
0004aa f4d9      	BRNE _0x56
                 ; 0000 023C if(keyMatrix(matrix) == 15)  {
0004ab 2fa5      	MOV  R26,R21
0004ac ddc6      	RCALL _keyMatrix
0004ad 30ef      	CPI  R30,LOW(0xF)
0004ae e0a0      	LDI  R26,HIGH(0xF)
0004af 07fa      	CPC  R31,R26
0004b0 f4a9      	BRNE _0x57
                 ; 0000 023D if(keyMatrix(matrix) != num) {
0004b1 d245      	RCALL SUBOPT_0x4
0004b2 f041      	BREQ _0x58
                 ; 0000 023E PORTB = vertical[3];
                +
0004b3 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
0004b5 d281      	RCALL SUBOPT_0xF
                 ; 0000 023F PORTC = green_led[3];
                 ; 0000 0240 lcd_gotoxy(0, 0);
                 ; 0000 0241 delay_us(500);
0004b6 d26a      	RCALL SUBOPT_0xB
                 ; 0000 0242 lcd_puts("F SW is not bomb");
                +
0004b7 e0ab     +LDI R26 , LOW ( _0x1B + ( 523 ) )
0004b8 e0b7     +LDI R27 , HIGH ( _0x1B + ( 523 ) )
                 	__POINTW2MN _0x1B,523
0004b9 d1bd      	RCALL _lcd_puts
                 ; 0000 0243 //lcd_gotoxy(15, 1);
                 ; 0000 0244 //lcd_puts(" ");
                 ; 0000 0245 }
                 ; 0000 0246 else {
0004ba c00b      	RJMP _0x59
                 _0x58:
                 ; 0000 0247 PORTB = vertical[3];
                +
0004bb 91e0 0754+LDS R30 , _vertical + ( 3 )
                 	__GETB1MN _vertical,3
0004bd d27e      	RCALL SUBOPT_0x10
                 ; 0000 0248 PORTC = red_led[3];
                 ; 0000 0249 lcd_clear();
                 ; 0000 024A lcd_gotoxy(0, 0);
                 ; 0000 024B delay_us(500);
0004be d262      	RCALL SUBOPT_0xB
                 ; 0000 024C lcd_puts("F SW is bomb");
                +
0004bf e1ac     +LDI R26 , LOW ( _0x1B + ( 540 ) )
0004c0 e0b7     +LDI R27 , HIGH ( _0x1B + ( 540 ) )
                 	__POINTW2MN _0x1B,540
0004c1 d1b5      	RCALL _lcd_puts
                 ; 0000 024D lcd_gotoxy(6, 1);
0004c2 d249      	RCALL SUBOPT_0x8
                 ; 0000 024E lcd_puts("BOMB");
                +
0004c3 e2a9     +LDI R26 , LOW ( _0x1B + ( 553 ) )
0004c4 e0b7     +LDI R27 , HIGH ( _0x1B + ( 553 ) )
                 	__POINTW2MN _0x1B,553
0004c5 d24a      	RCALL SUBOPT_0x9
                 ; 0000 024F buzzer2();
                 ; 0000 0250 delay_ms(3000);
                 ; 0000 0251 buzzer_off();
                 ; 0000 0252 brk = 1;
                 ; 0000 0253 tri = 0;
                 ; 0000 0254 }
                 _0x59:
                 ; 0000 0255 }
                 ; 0000 0256 }
                 _0x57:
                 ; 0000 0257 
                 ; 0000 0258 
                 ; 0000 0259 delay_ms(1); //동시입력 방지
                 _0x56:
0004c6 e0a1      	LDI  R26,LOW(1)
0004c7 e0b0      	LDI  R27,0
0004c8 d294      	RCALL _delay_ms
                 ; 0000 025A keyout = (keyout<<1) + 0x01;
0004c9 01f8      	MOVW R30,R16
0004ca 0fee      	LSL  R30
0004cb 1fff      	ROL  R31
0004cc 9631      	ADIW R30,1
0004cd 018f      	MOVW R16,R30
                 ; 0000 025B //스캔데이터 갱신 1110 -> 1101 -> 1011 -> 0111
                 ; 0000 025C }
                +
0004ce 5f2f     +SUBI R18 , LOW ( - 1 )
0004cf 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004d0 ce32      	RJMP _0x20
                 _0x21:
                 ; 0000 025D }
0004d1 ce29      	RJMP _0x1C
                 _0x1E:
                 ; 0000 025E }
0004d2 d283      	RCALL __LOADLOCR6
0004d3 9626      	ADIW R28,6
0004d4 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x1B:
000500           	.BYTE 0x22E
                 ;void reset(void)
                 ; 0000 0261 {
                 
                 	.CSEG
                 _reset:
                 ; .FSTART _reset
                 ; 0000 0262 PORTB = 0x00;   PORTC = 0xff;   PORTG = 0xff;   PORTE = 0xff; PORTE = 0x00; DDRE = 0x00; DDRF = 0x00;//led, 부저 초기화
0004d5 e0e0      	LDI  R30,LOW(0)
0004d6 bbe8      	OUT  0x18,R30
0004d7 efef      	LDI  R30,LOW(255)
0004d8 bbe5      	OUT  0x15,R30
0004d9 d26d      	RCALL SUBOPT_0x12
0004da b9e3      	OUT  0x3,R30
0004db d26f      	RCALL SUBOPT_0x13
0004dc e0e0      	LDI  R30,LOW(0)
0004dd 93e0 0061 	STS  97,R30
                 ; 0000 0263 num = 0; //난수 초기화
0004df 2444      	CLR  R4
0004e0 2455      	CLR  R5
                 ; 0000 0264 tri = 0; //tri 초기화
0004e1 2466      	CLR  R6
0004e2 2477      	CLR  R7
                 ; 0000 0265 buzzer_off();
0004e3 dd8b      	RCALL _buzzer_off
                 ; 0000 0266 lcd_init(16);   //lcd 16 x 2
0004e4 e1a0      	LDI  R26,LOW(16)
0004e5 d1c3      	RCALL _lcd_init
                 ; 0000 0267 lcd_clear();
0004e6 d168      	RCALL _lcd_clear
                 ; 0000 0268 lcd_gotoxy(4,0);
0004e7 e0e4      	LDI  R30,LOW(4)
0004e8 93ea      	ST   -Y,R30
0004e9 e0a0      	LDI  R26,LOW(0)
0004ea d156      	RCALL _lcd_gotoxy
                 ; 0000 0269 lcd_puts("MR TONG");
                +
0004eb e2ae     +LDI R26 , LOW ( _0x5A + ( 0 ) )
0004ec e0b7     +LDI R27 , HIGH ( _0x5A + ( 0 ) )
                 	__POINTW2MN _0x5A,0
0004ed d213      	RCALL SUBOPT_0x6
                 ; 0000 026A delay_us(500);
                 ; 0000 026B 
                 ; 0000 026C lcd_gotoxy(2,1);
0004ee e0e2      	LDI  R30,LOW(2)
0004ef 93ea      	ST   -Y,R30
0004f0 e0a1      	LDI  R26,LOW(1)
0004f1 d14f      	RCALL _lcd_gotoxy
                 ; 0000 026D lcd_puts("PUSH CONTINUE");
                +
0004f2 e3a6     +LDI R26 , LOW ( _0x5A + ( 8 ) )
0004f3 e0b7     +LDI R27 , HIGH ( _0x5A + ( 8 ) )
                 	__POINTW2MN _0x5A,8
0004f4 d182      	RCALL _lcd_puts
                 ; 0000 026E delay_ms(1000);
0004f5 eea8      	LDI  R26,LOW(1000)
0004f6 e0b3      	LDI  R27,HIGH(1000)
0004f7 d265      	RCALL _delay_ms
                 ; 0000 026F while(PINF != 0xfb) continue; //start스위치를 누르면 진행
                 _0x5B:
0004f8 b1e0      	IN   R30,0x0
0004f9 3feb      	CPI  R30,LOW(0xFB)
0004fa f7e9      	BRNE _0x5B
                 ; 0000 0270 lcd_clear();
0004fb d153      	RCALL _lcd_clear
                 ; 0000 0271 lcd_gotoxy(2, 0);
0004fc e0e2      	LDI  R30,LOW(2)
0004fd 93ea      	ST   -Y,R30
0004fe e0a0      	LDI  R26,LOW(0)
0004ff d141      	RCALL _lcd_gotoxy
                 ; 0000 0272 delay_ms(10);
000500 e0aa      	LDI  R26,LOW(10)
000501 e0b0      	LDI  R27,0
000502 d25a      	RCALL _delay_ms
                 ; 0000 0273 lcd_puts("SELECT  MODE"); //처음 상태 표시
                +
000503 e4a4     +LDI R26 , LOW ( _0x5A + ( 22 ) )
000504 e0b7     +LDI R27 , HIGH ( _0x5A + ( 22 ) )
                 	__POINTW2MN _0x5A,22
000505 d171      	RCALL _lcd_puts
                 ; 0000 0274 lcd_gotoxy(0, 1);
000506 e0e0      	LDI  R30,LOW(0)
000507 93ea      	ST   -Y,R30
000508 e0a1      	LDI  R26,LOW(1)
000509 d137      	RCALL _lcd_gotoxy
                 ; 0000 0275 lcd_putsf("    16 |  8"); //16/8모드 선택
                +
00050a eea5     +LDI R26 , LOW ( 2 * _0x0 + ( 563 ) )
00050b e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 563 ) )
                 	__POINTW2FN _0x0,563
00050c d179      	RCALL _lcd_putsf
                 ; 0000 0276 delay_ms(500);
00050d efa4      	LDI  R26,LOW(500)
00050e e0b1      	LDI  R27,HIGH(500)
00050f d24d      	RCALL _delay_ms
                 ; 0000 0277 mode = 16;      //기본 상태 모드 16
000510 e1e0      	LDI  R30,LOW(16)
000511 e0f0      	LDI  R31,HIGH(16)
000512 014f      	MOVW R8,R30
                 ; 0000 0278 while((PINF != 0xfb)) modee(); //start 스위치를 누를때까지 모드를 정하다가 start가 되는 순간 mode 모드 탈출 하고 동시에 당첨 번호 정함
                 _0x5E:
000513 b1e0      	IN   R30,0x0
000514 3feb      	CPI  R30,LOW(0xFB)
000515 f011      	BREQ _0x60
000516 dd41      	RCALL _modee
000517 cffb      	RJMP _0x5E
                 _0x60:
                 ; 0000 0279 lcd_clear();
000518 d136      	RCALL _lcd_clear
                 ; 0000 027A lcd_gotoxy(3,1);
000519 d1d5      	RCALL SUBOPT_0x2
                 ; 0000 027B lcd_putsf("GAME READY");
                +
00051a efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 575 ) )
00051b e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 575 ) )
                 	__POINTW2FN _0x0,575
00051c d169      	RCALL _lcd_putsf
                 ; 0000 027C lcd_gotoxy(0,0);
00051d d1d5      	RCALL SUBOPT_0x3
                 ; 0000 027D switch(PINE & 0xF0){ //당첨 번호(num)
00051e b1e1      	IN   R30,0x1
00051f 7fe0      	ANDI R30,LOW(0xF0)
                 ; 0000 027E case 0x00: num = 0; break;
000520 30e0      	CPI  R30,0
000521 f419      	BRNE _0x64
000522 2444      	CLR  R4
000523 2455      	CLR  R5
000524 c04b      	RJMP _0x63
                 ; 0000 027F case 0x10: num = 1; break;
                 _0x64:
000525 31e0      	CPI  R30,LOW(0x10)
000526 f419      	BRNE _0x65
000527 e0e1      	LDI  R30,LOW(1)
000528 e0f0      	LDI  R31,HIGH(1)
000529 c045      	RJMP _0x91
                 ; 0000 0280 case 0x20: num = 2; break;
                 _0x65:
00052a 32e0      	CPI  R30,LOW(0x20)
00052b f419      	BRNE _0x66
00052c e0e2      	LDI  R30,LOW(2)
00052d e0f0      	LDI  R31,HIGH(2)
00052e c040      	RJMP _0x91
                 ; 0000 0281 case 0x30: num = 3; break;
                 _0x66:
00052f 33e0      	CPI  R30,LOW(0x30)
000530 f419      	BRNE _0x67
000531 e0e3      	LDI  R30,LOW(3)
000532 e0f0      	LDI  R31,HIGH(3)
000533 c03b      	RJMP _0x91
                 ; 0000 0282 case 0x40: num = 4; break;
                 _0x67:
000534 34e0      	CPI  R30,LOW(0x40)
000535 f419      	BRNE _0x68
000536 e0e4      	LDI  R30,LOW(4)
000537 e0f0      	LDI  R31,HIGH(4)
000538 c036      	RJMP _0x91
                 ; 0000 0283 case 0x50: num = 5; break;
                 _0x68:
000539 35e0      	CPI  R30,LOW(0x50)
00053a f419      	BRNE _0x69
00053b e0e5      	LDI  R30,LOW(5)
00053c e0f0      	LDI  R31,HIGH(5)
00053d c031      	RJMP _0x91
                 ; 0000 0284 case 0x60: num = 6; break;
                 _0x69:
00053e 36e0      	CPI  R30,LOW(0x60)
00053f f419      	BRNE _0x6A
000540 e0e6      	LDI  R30,LOW(6)
000541 e0f0      	LDI  R31,HIGH(6)
000542 c02c      	RJMP _0x91
                 ; 0000 0285 case 0x70: num = 7; break;
                 _0x6A:
000543 37e0      	CPI  R30,LOW(0x70)
000544 f419      	BRNE _0x6B
000545 e0e7      	LDI  R30,LOW(7)
000546 e0f0      	LDI  R31,HIGH(7)
000547 c027      	RJMP _0x91
                 ; 0000 0286 case 0x80: num = 8; break;
                 _0x6B:
000548 38e0      	CPI  R30,LOW(0x80)
000549 f419      	BRNE _0x6C
00054a e0e8      	LDI  R30,LOW(8)
00054b e0f0      	LDI  R31,HIGH(8)
00054c c022      	RJMP _0x91
                 ; 0000 0287 case 0x90: num = 9; break;
                 _0x6C:
00054d 39e0      	CPI  R30,LOW(0x90)
00054e f419      	BRNE _0x6D
00054f e0e9      	LDI  R30,LOW(9)
000550 e0f0      	LDI  R31,HIGH(9)
000551 c01d      	RJMP _0x91
                 ; 0000 0288 case 0xA0: num = 10;break;
                 _0x6D:
000552 3ae0      	CPI  R30,LOW(0xA0)
000553 f419      	BRNE _0x6E
000554 e0ea      	LDI  R30,LOW(10)
000555 e0f0      	LDI  R31,HIGH(10)
000556 c018      	RJMP _0x91
                 ; 0000 0289 case 0xB0: num = 11;break;
                 _0x6E:
000557 3be0      	CPI  R30,LOW(0xB0)
000558 f419      	BRNE _0x6F
000559 e0eb      	LDI  R30,LOW(11)
00055a e0f0      	LDI  R31,HIGH(11)
00055b c013      	RJMP _0x91
                 ; 0000 028A case 0xC0: num = 12;break;
                 _0x6F:
00055c 3ce0      	CPI  R30,LOW(0xC0)
00055d f419      	BRNE _0x70
00055e e0ec      	LDI  R30,LOW(12)
00055f e0f0      	LDI  R31,HIGH(12)
000560 c00e      	RJMP _0x91
                 ; 0000 028B case 0xD0: num = 13;break;
                 _0x70:
000561 3de0      	CPI  R30,LOW(0xD0)
000562 f419      	BRNE _0x71
000563 e0ed      	LDI  R30,LOW(13)
000564 e0f0      	LDI  R31,HIGH(13)
000565 c009      	RJMP _0x91
                 ; 0000 028C case 0xE0: num = 14;break;
                 _0x71:
000566 3ee0      	CPI  R30,LOW(0xE0)
000567 f419      	BRNE _0x72
000568 e0ee      	LDI  R30,LOW(14)
000569 e0f0      	LDI  R31,HIGH(14)
00056a c004      	RJMP _0x91
                 ; 0000 028D case 0xF0: num = 15;break;
                 _0x72:
00056b 3fe0      	CPI  R30,LOW(0xF0)
00056c f419      	BRNE _0x63
00056d e0ef      	LDI  R30,LOW(15)
00056e e0f0      	LDI  R31,HIGH(15)
                 _0x91:
00056f 012f      	MOVW R4,R30
                 ; 0000 028E }
                 _0x63:
                 ; 0000 028F if(mode == 8 && num >= 8) //8모드일때 난수값 설정
000570 e0e8      	LDI  R30,LOW(8)
000571 e0f0      	LDI  R31,HIGH(8)
000572 15e8      	CP   R30,R8
000573 05f9      	CPC  R31,R9
000574 f419      	BRNE _0x75
000575 164e      	CP   R4,R30
000576 065f      	CPC  R5,R31
000577 f408      	BRSH _0x76
                 _0x75:
000578 c003      	RJMP _0x74
                 _0x76:
                 ; 0000 0290 num = num - 8;  //8모드 일때, 당첨숫자는 0번 ~ 7번이여서 8번 ~ 16번은 8을 빼서 0~7번으로 만든다
000579 01f2      	MOVW R30,R4
00057a 9738      	SBIW R30,8
00057b 012f      	MOVW R4,R30
                 ; 0000 0291 
                 ; 0000 0292 DDRE = 0xff;
                 _0x74:
00057c efef      	LDI  R30,LOW(255)
00057d b9e2      	OUT  0x2,R30
                 ; 0000 0293 
                 ; 0000 0294 switch(num){ //난수값을 led로 표시
00057e 01f2      	MOVW R30,R4
                 ; 0000 0295 case 0: PORTE = 0x00;   break;
00057f 9730      	SBIW R30,0
000580 f411      	BRNE _0x7A
000581 e0e0      	LDI  R30,LOW(0)
000582 c059      	RJMP _0x92
                 ; 0000 0296 case 1: PORTE = 0x10;   break;
                 _0x7A:
000583 30e1      	CPI  R30,LOW(0x1)
000584 e0a0      	LDI  R26,HIGH(0x1)
000585 07fa      	CPC  R31,R26
000586 f411      	BRNE _0x7B
000587 e1e0      	LDI  R30,LOW(16)
000588 c053      	RJMP _0x92
                 ; 0000 0297 case 2: PORTE = 0x20;   break;
                 _0x7B:
000589 30e2      	CPI  R30,LOW(0x2)
00058a e0a0      	LDI  R26,HIGH(0x2)
00058b 07fa      	CPC  R31,R26
00058c f411      	BRNE _0x7C
00058d e2e0      	LDI  R30,LOW(32)
00058e c04d      	RJMP _0x92
                 ; 0000 0298 case 3: PORTE = 0x30;   break;
                 _0x7C:
00058f 30e3      	CPI  R30,LOW(0x3)
000590 e0a0      	LDI  R26,HIGH(0x3)
000591 07fa      	CPC  R31,R26
000592 f411      	BRNE _0x7D
000593 e3e0      	LDI  R30,LOW(48)
000594 c047      	RJMP _0x92
                 ; 0000 0299 case 4: PORTE = 0x40;   break;
                 _0x7D:
000595 30e4      	CPI  R30,LOW(0x4)
000596 e0a0      	LDI  R26,HIGH(0x4)
000597 07fa      	CPC  R31,R26
000598 f411      	BRNE _0x7E
000599 e4e0      	LDI  R30,LOW(64)
00059a c041      	RJMP _0x92
                 ; 0000 029A case 5: PORTE = 0x50;   break;
                 _0x7E:
00059b 30e5      	CPI  R30,LOW(0x5)
00059c e0a0      	LDI  R26,HIGH(0x5)
00059d 07fa      	CPC  R31,R26
00059e f411      	BRNE _0x7F
00059f e5e0      	LDI  R30,LOW(80)
0005a0 c03b      	RJMP _0x92
                 ; 0000 029B case 6: PORTE = 0x60;   break;
                 _0x7F:
0005a1 30e6      	CPI  R30,LOW(0x6)
0005a2 e0a0      	LDI  R26,HIGH(0x6)
0005a3 07fa      	CPC  R31,R26
0005a4 f411      	BRNE _0x80
0005a5 e6e0      	LDI  R30,LOW(96)
0005a6 c035      	RJMP _0x92
                 ; 0000 029C case 7: PORTE = 0x70;   break;
                 _0x80:
0005a7 30e7      	CPI  R30,LOW(0x7)
0005a8 e0a0      	LDI  R26,HIGH(0x7)
0005a9 07fa      	CPC  R31,R26
0005aa f411      	BRNE _0x81
0005ab e7e0      	LDI  R30,LOW(112)
0005ac c02f      	RJMP _0x92
                 ; 0000 029D case 8: PORTE = 0x80;   break;
                 _0x81:
0005ad 30e8      	CPI  R30,LOW(0x8)
0005ae e0a0      	LDI  R26,HIGH(0x8)
0005af 07fa      	CPC  R31,R26
0005b0 f411      	BRNE _0x82
0005b1 e8e0      	LDI  R30,LOW(128)
0005b2 c029      	RJMP _0x92
                 ; 0000 029E case 9: PORTE = 0x90;   break;
                 _0x82:
0005b3 30e9      	CPI  R30,LOW(0x9)
0005b4 e0a0      	LDI  R26,HIGH(0x9)
0005b5 07fa      	CPC  R31,R26
0005b6 f411      	BRNE _0x83
0005b7 e9e0      	LDI  R30,LOW(144)
0005b8 c023      	RJMP _0x92
                 ; 0000 029F case 10: PORTE = 0xA0;  break;
                 _0x83:
0005b9 30ea      	CPI  R30,LOW(0xA)
0005ba e0a0      	LDI  R26,HIGH(0xA)
0005bb 07fa      	CPC  R31,R26
0005bc f411      	BRNE _0x84
0005bd eae0      	LDI  R30,LOW(160)
0005be c01d      	RJMP _0x92
                 ; 0000 02A0 case 11: PORTE = 0xB0;  break;
                 _0x84:
0005bf 30eb      	CPI  R30,LOW(0xB)
0005c0 e0a0      	LDI  R26,HIGH(0xB)
0005c1 07fa      	CPC  R31,R26
0005c2 f411      	BRNE _0x85
0005c3 ebe0      	LDI  R30,LOW(176)
0005c4 c017      	RJMP _0x92
                 ; 0000 02A1 case 12: PORTE = 0xC0;  break;
                 _0x85:
0005c5 30ec      	CPI  R30,LOW(0xC)
0005c6 e0a0      	LDI  R26,HIGH(0xC)
0005c7 07fa      	CPC  R31,R26
0005c8 f411      	BRNE _0x86
0005c9 ece0      	LDI  R30,LOW(192)
0005ca c011      	RJMP _0x92
                 ; 0000 02A2 case 13: PORTE = 0xD0;  break;
                 _0x86:
0005cb 30ed      	CPI  R30,LOW(0xD)
0005cc e0a0      	LDI  R26,HIGH(0xD)
0005cd 07fa      	CPC  R31,R26
0005ce f411      	BRNE _0x87
0005cf ede0      	LDI  R30,LOW(208)
0005d0 c00b      	RJMP _0x92
                 ; 0000 02A3 case 14: PORTE = 0xE0;  break;
                 _0x87:
0005d1 30ee      	CPI  R30,LOW(0xE)
0005d2 e0a0      	LDI  R26,HIGH(0xE)
0005d3 07fa      	CPC  R31,R26
0005d4 f411      	BRNE _0x88
0005d5 eee0      	LDI  R30,LOW(224)
0005d6 c005      	RJMP _0x92
                 ; 0000 02A4 case 15: PORTE = 0xF0;  break;
                 _0x88:
0005d7 30ef      	CPI  R30,LOW(0xF)
0005d8 e0a0      	LDI  R26,HIGH(0xF)
0005d9 07fa      	CPC  R31,R26
0005da f411      	BRNE _0x79
0005db efe0      	LDI  R30,LOW(240)
                 _0x92:
0005dc b9e3      	OUT  0x3,R30
                 ; 0000 02A5 }
                 _0x79:
                 ; 0000 02A6 
                 ; 0000 02A7 
                 ; 0000 02A8 delay_ms(500);
0005dd efa4      	LDI  R26,LOW(500)
0005de e0b1      	LDI  R27,HIGH(500)
0005df d17d      	RCALL _delay_ms
                 ; 0000 02A9 
                 ; 0000 02AA brk = 0; //초기값 갱신
0005e0 24aa      	CLR  R10
0005e1 24bb      	CLR  R11
                 ; 0000 02AB 
                 ; 0000 02AC while(brk == 0) {
                 _0x8A:
0005e2 2c0a      	MOV  R0,R10
0005e3 280b      	OR   R0,R11
0005e4 f431      	BRNE _0x8C
                 ; 0000 02AD buzzer_off(); // 게임 실행 후 buzzer off
0005e5 dc89      	RCALL _buzzer_off
                 ; 0000 02AE tri = 1; // 0->1로 갱신
0005e6 e0e1      	LDI  R30,LOW(1)
0005e7 e0f0      	LDI  R31,HIGH(1)
0005e8 013f      	MOVW R6,R30
                 ; 0000 02AF manager(); //시작부분으로 돌아감
0005e9 dd00      	RCALL _manager
                 ; 0000 02B0 }
0005ea cff7      	RJMP _0x8A
                 _0x8C:
                 ; 0000 02B1 }
0005eb 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x5A:
00072e           	.BYTE 0x23
                 ;void main(void)
                 ; 0000 02B4 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 02B5 PORTA = 0xff; DDRA = 0xff; //LCD
0005ec efef      	LDI  R30,LOW(255)
0005ed bbeb      	OUT  0x1B,R30
0005ee bbea      	OUT  0x1A,R30
                 ; 0000 02B6 PORTB = 0x00; DDRB = 0xff; //LED 4개 가로 1이면 on
0005ef e0e0      	LDI  R30,LOW(0)
0005f0 bbe8      	OUT  0x18,R30
0005f1 efef      	LDI  R30,LOW(255)
0005f2 bbe7      	OUT  0x17,R30
                 ; 0000 02B7 PORTC = 0xff; DDRC = 0xff; //LED 8개 세로 0이면 on
0005f3 bbe5      	OUT  0x15,R30
0005f4 bbe4      	OUT  0x14,R30
                 ; 0000 02B8 PORTD = 0x00; DDRD = 0x0f; //키매트릭스
0005f5 e0e0      	LDI  R30,LOW(0)
0005f6 bbe2      	OUT  0x12,R30
0005f7 e0ef      	LDI  R30,LOW(15)
0005f8 bbe1      	OUT  0x11,R30
                 ; 0000 02B9 PORTE = 0x00; DDRE = 0x00; //랜덤 입력(4~7)
0005f9 d151      	RCALL SUBOPT_0x13
                 ; 0000 02BA PORTF = 0xff; DDRF = 0x00; //기타 입력(16(0), 8(1), ST(2), RST(3))
0005fa efef      	LDI  R30,LOW(255)
0005fb 93e0 0062 	STS  98,R30
0005fd e0e0      	LDI  R30,LOW(0)
0005fe 93e0 0061 	STS  97,R30
                 ; 0000 02BB PORTG = 0xff; DDRG = 0xff; //오디오
000600 d146      	RCALL SUBOPT_0x12
000601 93e0 0064 	STS  100,R30
                 ; 0000 02BC 
                 ; 0000 02BD while(1)  reset();
                 _0x8D:
000603 ded1      	RCALL _reset
000604 cffe      	RJMP _0x8D
                 ; 0000 02BE }
                 _0x90:
000605 cfff      	RJMP _0x90
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
000606 e0ff          ldi   r31,15
                 __lcd_delay0:
000607 95fa          dec   r31
000608 f7f1          brne  __lcd_delay0
000609 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
00060a b3aa          in    r26,__lcd_direction
00060b 70af          andi  r26,0xf                 ;set as input
00060c bbaa          out   __lcd_direction,r26
00060d 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00060e 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00060f dff6      	RCALL __lcd_delay_G100
000610 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000611 dff4      	RCALL __lcd_delay_G100
000612 b3a9          in    r26,__lcd_pin
000613 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000614 dff1      	RCALL __lcd_delay_G100
000615 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000616 dfef      	RCALL __lcd_delay_G100
000617 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000618 fda7          sbrc  r26,__lcd_busy_flag
000619 cff5          rjmp  __lcd_busy
00061a 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00061b 7fa0          andi  r26,0xf0
00061c 2bab          or    r26,r27
00061d bbab          out   __lcd_port,r26          ;write
00061e 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00061f dfe6      	RCALL __lcd_delay_G100
000620 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000621 dfe4      	RCALL __lcd_delay_G100
000622 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000623 93aa      	ST   -Y,R26
000624 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000625 b3aa          in    r26,__lcd_direction
000626 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000627 bbaa          out   __lcd_direction,r26
000628 b3bb          in    r27,__lcd_port
000629 70bf          andi  r27,0xf
00062a 81a8          ld    r26,y
00062b dfef      	RCALL __lcd_write_nibble_G100
00062c 81a8          ld    r26,y
00062d 95a2          swap  r26
00062e dfec      	RCALL __lcd_write_nibble_G100
00062f 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000630 940c 06da 	JMP  _0x2080001
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
000632 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000633 dfd2      	RCALL __lcd_delay_G100
000634 b3e9          in    r30,__lcd_pin           ;read
000635 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000636 dfcf      	RCALL __lcd_delay_G100
000637 7fe0          andi  r30,0xf0
000638 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
000639 dfcc      	RCALL __lcd_delay_G100
00063a dff7      	RCALL __lcd_read_nibble_G100
00063b 2fae          mov   r26,r30
00063c dff5      	RCALL __lcd_read_nibble_G100
00063d 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
00063e 95e2          swap  r30
00063f 2bea          or    r30,r26
000640 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000641 93aa      	ST   -Y,R26
000642 dfc7      	RCALL __lcd_ready
000643 81e8      	LD   R30,Y
000644 e0f0      	LDI  R31,0
000645 5ae3      	SUBI R30,LOW(-__base_y_G100)
000646 4ff8      	SBCI R31,HIGH(-__base_y_G100)
000647 81e0      	LD   R30,Z
000648 81a9      	LDD  R26,Y+1
000649 0fae      	ADD  R26,R30
00064a dfd8      	RCALL __lcd_write_data
00064b 80d9      	LDD  R13,Y+1
00064c 80c8      	LDD  R12,Y+0
00064d 9622      	ADIW R28,2
00064e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00064f dfba      	RCALL __lcd_ready
000650 e0a2      	LDI  R26,LOW(2)
000651 dfd1      	RCALL __lcd_write_data
000652 dfb7      	RCALL __lcd_ready
000653 e0ac      	LDI  R26,LOW(12)
000654 dfce      	RCALL __lcd_write_data
000655 dfb4      	RCALL __lcd_ready
000656 e0a1      	LDI  R26,LOW(1)
000657 dfcb      	RCALL __lcd_write_data
000658 e0e0      	LDI  R30,LOW(0)
000659 2ece      	MOV  R12,R30
00065a 2ede      	MOV  R13,R30
00065b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00065c 93aa      	ST   -Y,R26
00065d 93ef          push r30
00065e 93ff          push r31
00065f 81a8          ld   r26,y
000660 9468          set
000661 30aa          cpi  r26,10
000662 f029          breq __lcd_putchar1
000663 94e8          clt
000664 91e0 0761 	LDS  R30,__lcd_maxx
000666 16de      	CP   R13,R30
000667 f030      	BRLO _0x2000004
                 	__lcd_putchar1:
000668 94c3      	INC  R12
000669 e0e0      	LDI  R30,LOW(0)
00066a 93ea      	ST   -Y,R30
00066b 2dac      	MOV  R26,R12
00066c dfd4      	RCALL _lcd_gotoxy
00066d f02e      	brts __lcd_putchar0
                 _0x2000004:
00066e 94d3      	INC  R13
00066f df9a          rcall __lcd_ready
000670 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
000671 81a8      	LD   R26,Y
000672 dfb0      	RCALL __lcd_write_data
                 __lcd_putchar0:
000673 91ff          pop  r31
000674 91ef          pop  r30
000675 940c 06da 	JMP  _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000677 93ba      	ST   -Y,R27
000678 93aa      	ST   -Y,R26
000679 931a      	ST   -Y,R17
                 _0x2000005:
00067a 81a9      	LDD  R26,Y+1
00067b 81ba      	LDD  R27,Y+1+1
00067c 91ed      	LD   R30,X+
00067d 83a9      	STD  Y+1,R26
00067e 83ba      	STD  Y+1+1,R27
00067f 2f1e      	MOV  R17,R30
000680 30e0      	CPI  R30,0
000681 f019      	BREQ _0x2000007
000682 2fa1      	MOV  R26,R17
000683 dfd8      	RCALL _lcd_putchar
000684 cff5      	RJMP _0x2000005
                 _0x2000007:
000685 c010      	RJMP _0x2080002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000686 93ba      	ST   -Y,R27
000687 93aa      	ST   -Y,R26
000688 931a      	ST   -Y,R17
                 _0x2000008:
000689 81e9      	LDD  R30,Y+1
00068a 81fa      	LDD  R31,Y+1+1
00068b 9631      	ADIW R30,1
00068c 83e9      	STD  Y+1,R30
00068d 83fa      	STD  Y+1+1,R31
00068e 9731      	SBIW R30,1
00068f 91e4      	LPM  R30,Z
000690 2f1e      	MOV  R17,R30
000691 30e0      	CPI  R30,0
000692 f019      	BREQ _0x200000A
000693 2fa1      	MOV  R26,R17
000694 dfc7      	RCALL _lcd_putchar
000695 cff3      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
000696 8118      	LDD  R17,Y+0
000697 9623      	ADIW R28,3
000698 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
000699 27aa          clr   r26
00069a 27bb          clr   r27
                 __long_delay0:
00069b 9711          sbiw  r26,1         ;2 cycles
00069c f7f1          brne  __long_delay0 ;2 cycles
00069d 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
00069e 93aa      	ST   -Y,R26
00069f 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0006a0 b3aa          in    r26,__lcd_direction
0006a1 6fa7          ori   r26,0xf7                ;set as output
0006a2 bbaa          out   __lcd_direction,r26
0006a3 b3bb          in    r27,__lcd_port
0006a4 70bf          andi  r27,0xf
0006a5 81a8          ld    r26,y
0006a6 df74      	RCALL __lcd_write_nibble_G100
0006a7 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0006a8 c031      	RJMP _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0006a9 93aa      	ST   -Y,R26
0006aa 98da          cbi   __lcd_port,__lcd_enable ;EN=0
0006ab 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
0006ac 81e8      	LD   R30,Y
0006ad 93e0 0761 	STS  __lcd_maxx,R30
0006af 58e0      	SUBI R30,-LOW(128)
                +
0006b0 93e0 075f+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0006b2 81e8      	LD   R30,Y
0006b3 54e0      	SUBI R30,-LOW(192)
                +
0006b4 93e0 0760+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0006b6 dfe2      	RCALL __long_delay_G100
0006b7 e3a0      	LDI  R26,LOW(48)
0006b8 dfe5      	RCALL __lcd_init_write_G100
0006b9 dfdf      	RCALL __long_delay_G100
0006ba e3a0      	LDI  R26,LOW(48)
0006bb dfe2      	RCALL __lcd_init_write_G100
0006bc dfdc      	RCALL __long_delay_G100
0006bd e3a0      	LDI  R26,LOW(48)
0006be dfdf      	RCALL __lcd_init_write_G100
0006bf dfd9      	RCALL __long_delay_G100
0006c0 e2a0      	LDI  R26,LOW(32)
0006c1 dfdc      	RCALL __lcd_init_write_G100
0006c2 dfd6      	RCALL __long_delay_G100
0006c3 e2a8      	LDI  R26,LOW(40)
0006c4 df5e      	RCALL __lcd_write_data
0006c5 dfd3      	RCALL __long_delay_G100
0006c6 e0a4      	LDI  R26,LOW(4)
0006c7 df5b      	RCALL __lcd_write_data
0006c8 dfd0      	RCALL __long_delay_G100
0006c9 e8a5      	LDI  R26,LOW(133)
0006ca df58      	RCALL __lcd_write_data
0006cb dfcd      	RCALL __long_delay_G100
0006cc b3aa          in    r26,__lcd_direction
0006cd 70af          andi  r26,0xf                 ;set as input
0006ce bbaa          out   __lcd_direction,r26
0006cf 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0006d0 df68      	RCALL _lcd_read_byte0_G100
0006d1 30e5      	CPI  R30,LOW(0x5)
0006d2 f011      	BREQ _0x200000B
0006d3 e0e0      	LDI  R30,LOW(0)
0006d4 c005      	RJMP _0x2080001
                 _0x200000B:
0006d5 df34      	RCALL __lcd_ready
0006d6 e0a6      	LDI  R26,LOW(6)
0006d7 df4b      	RCALL __lcd_write_data
0006d8 df76      	RCALL _lcd_clear
0006d9 e0e1      	LDI  R30,LOW(1)
                 _0x2080001:
0006da 9621      	ADIW R28,1
0006db 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _vertical:
000751           	.BYTE 0x4
                 _red_led:
000755           	.BYTE 0x4
                 _green_led:
000759           	.BYTE 0x4
                 __base_y_G100:
00075d           	.BYTE 0x4
                 __lcd_maxx:
000761           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
0006dc 014f      	MOVW R8,R30
0006dd df71      	RCALL _lcd_clear
0006de e0e0      	LDI  R30,LOW(0)
0006df 93ea      	ST   -Y,R30
0006e0 e0a0      	LDI  R26,LOW(0)
0006e1 df5f      	RCALL _lcd_gotoxy
                +
0006e2 eba2     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0006e3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0006e4 dfa1      	RCALL _lcd_putsf
0006e5 e0e0      	LDI  R30,LOW(0)
0006e6 93ea      	ST   -Y,R30
0006e7 e0a1      	LDI  R26,LOW(1)
0006e8 cf58      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0006e9 df9c      	RCALL _lcd_putsf
0006ea e0e0      	LDI  R30,LOW(0)
0006eb bbe8      	OUT  0x18,R30
0006ec efef      	LDI  R30,LOW(255)
0006ed bbe5      	OUT  0x15,R30
0006ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0006ef e0e3      	LDI  R30,LOW(3)
0006f0 93ea      	ST   -Y,R30
0006f1 e0a1      	LDI  R26,LOW(1)
0006f2 cf4e      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:97 WORDS
                 SUBOPT_0x3:
0006f3 e0e0      	LDI  R30,LOW(0)
0006f4 93ea      	ST   -Y,R30
0006f5 e0a0      	LDI  R26,LOW(0)
0006f6 cf4a      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:43 WORDS
                 SUBOPT_0x4:
0006f7 2fa5      	MOV  R26,R21
0006f8 db7a      	RCALL _keyMatrix
0006f9 164e      	CP   R4,R30
0006fa 065f      	CPC  R5,R31
0006fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
0006fc bbe8      	OUT  0x18,R30
0006fd 91e0 0759 	LDS  R30,_green_led
0006ff bbe5      	OUT  0x15,R30
000700 cff2      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000701 df75      	RCALL _lcd_puts
                +
000702 ed80     +LDI R24 , LOW ( 2000 )
000703 e097     +LDI R25 , HIGH ( 2000 )
                +__DELAY_USW_LOOP :
000704 9701     +SBIW R24 , 1
000705 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 2000
000706 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000707 bbe8      	OUT  0x18,R30
000708 91e0 0755 	LDS  R30,_red_led
00070a bbe5      	OUT  0x15,R30
00070b cf43      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:43 WORDS
                 SUBOPT_0x8:
00070c e0e6      	LDI  R30,LOW(6)
00070d 93ea      	ST   -Y,R30
00070e e0a1      	LDI  R26,LOW(1)
00070f cf31      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:148 WORDS
                 SUBOPT_0x9:
000710 df66      	RCALL _lcd_puts
000711 db5b      	RCALL _buzzer2
000712 eba8      	LDI  R26,LOW(3000)
000713 e0bb      	LDI  R27,HIGH(3000)
000714 d048      	RCALL _delay_ms
000715 db59      	RCALL _buzzer_off
000716 e0e1      	LDI  R30,LOW(1)
000717 e0f0      	LDI  R31,HIGH(1)
000718 015f      	MOVW R10,R30
000719 2466      	CLR  R6
00071a 2477      	CLR  R7
00071b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
00071c bbe8      	OUT  0x18,R30
                +
00071d 91e0 075a+LDS R30 , _green_led + ( 1 )
                 	__GETB1MN _green_led,1
00071f bbe5      	OUT  0x15,R30
000720 cfd2      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:85 WORDS
                 SUBOPT_0xB:
                +
000721 ed80     +LDI R24 , LOW ( 2000 )
000722 e097     +LDI R25 , HIGH ( 2000 )
                +__DELAY_USW_LOOP :
000723 9701     +SBIW R24 , 1
000724 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 2000
000725 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xC:
000726 bbe8      	OUT  0x18,R30
                +
000727 91e0 0756+LDS R30 , _red_led + ( 1 )
                 	__GETB1MN _red_led,1
000729 bbe5      	OUT  0x15,R30
00072a df24      	RCALL _lcd_clear
00072b cfc7      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xD:
00072c bbe8      	OUT  0x18,R30
                +
00072d 91e0 075b+LDS R30 , _green_led + ( 2 )
                 	__GETB1MN _green_led,2
00072f bbe5      	OUT  0x15,R30
000730 cfc2      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
000731 bbe8      	OUT  0x18,R30
                +
000732 91e0 0757+LDS R30 , _red_led + ( 2 )
                 	__GETB1MN _red_led,2
000734 bbe5      	OUT  0x15,R30
000735 df19      	RCALL _lcd_clear
000736 cfbc      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xF:
000737 bbe8      	OUT  0x18,R30
                +
000738 91e0 075c+LDS R30 , _green_led + ( 3 )
                 	__GETB1MN _green_led,3
00073a bbe5      	OUT  0x15,R30
00073b cfb7      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
00073c bbe8      	OUT  0x18,R30
                +
00073d 91e0 0758+LDS R30 , _red_led + ( 3 )
                 	__GETB1MN _red_led,3
00073f bbe5      	OUT  0x15,R30
000740 df0e      	RCALL _lcd_clear
000741 cfb1      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x11:
000742 e1e0      	LDI  R30,LOW(16)
000743 e0f0      	LDI  R31,HIGH(16)
000744 15e8      	CP   R30,R8
000745 05f9      	CPC  R31,R9
000746 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000747 efef      	LDI  R30,LOW(255)
000748 93e0 0065 	STS  101,R30
00074a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
00074b e0e0      	LDI  R30,LOW(0)
00074c b9e3      	OUT  0x3,R30
00074d b9e2      	OUT  0x2,R30
00074e 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
00074f 935a      	ST   -Y,R21
                 __SAVELOCR5:
000750 934a      	ST   -Y,R20
                 __SAVELOCR4:
000751 933a      	ST   -Y,R19
                 __SAVELOCR3:
000752 932a      	ST   -Y,R18
                 __SAVELOCR2:
000753 931a      	ST   -Y,R17
000754 930a      	ST   -Y,R16
000755 9508      	RET
                 
                 __LOADLOCR6:
000756 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000757 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000758 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000759 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00075a 8119      	LDD  R17,Y+1
00075b 8108      	LD   R16,Y
00075c 9508      	RET
                 
                 _delay_ms:
00075d 9610      	adiw r26,0
00075e f039      	breq __delay_ms1
                 __delay_ms0:
00075f 95a8      	wdr
                +
000760 ea80     +LDI R24 , LOW ( 0xFA0 )
000761 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000762 9701     +SBIW R24 , 1
000763 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000764 9711      	sbiw r26,1
000765 f7c9      	brne __delay_ms0
                 __delay_ms1:
000766 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :   8 r5 :   4 r6 :   4 r7 :   3 
r8 :   4 r9 :   2 r10:   3 r11:   2 r12:   4 r13:   4 r14:   0 r15:   0 
r16:  23 r17:  26 r18:   5 r19:   7 r20:   2 r21:  20 r22:   2 r23:   0 
r24:  14 r25:   5 r26: 243 r27:  77 r28:   6 r29:   1 r30: 300 r31:  85 
x  :   4 y  :  53 z  :   9 
Registers used: 30 out of 35 (85.7%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   8 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  23 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  87 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :  51 cpi   :  71 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  14 inc   :   2 jmp   :  38 ld    :  11 ldd   :  13 
ldi   : 346 lds   :  41 lpm   :   9 lsl   :   1 lsr   :   0 mov   :  29 
movw  :  14 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   4 ori   :   2 out   :  45 pop   :   2 push  :   2 rcall : 273 
ret   :  26 reti  :   0 rjmp  :  91 rol   :   1 ror   :   0 sbc   :   0 
sbci  :   2 sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :  12 sbr   :   0 
sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  30 std   :   4 sts   :  10 sub   :   0 subi  :   4 
swap  :   2 tst   :   0 wdr   :   1 
Instructions used: 48 out of 117 (41.0%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ece   2826    964   3790  131072   2.9%
[.dseg] 0x000100 0x000762      0    610    610    4096  14.9%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
